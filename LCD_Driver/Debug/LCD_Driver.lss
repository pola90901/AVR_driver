
LCD_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002284  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002284  000022f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000016c8  00000000  00000000  00002300  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c6c  00000000  00000000  000039c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  00004634  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001ad  00000000  00000000  000047b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022c4  00000000  00000000  00004961  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000125b  00000000  00000000  00006c25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001055  00000000  00000000  00007e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00008ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ca  00000000  00000000  00009078  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ca  00000000  00000000  00009342  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009c0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e8       	ldi	r30, 0x84	; 132
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <main>
      7a:	0c 94 40 11 	jmp	0x2280	; 0x2280 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 1d 04 	call	0x83a	; 0x83a <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 09 11 	jmp	0x2212	; 0x2212 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 25 11 	jmp	0x224a	; 0x224a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 15 11 	jmp	0x222a	; 0x222a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 31 11 	jmp	0x2262	; 0x2262 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 15 11 	jmp	0x222a	; 0x222a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 31 11 	jmp	0x2262	; 0x2262 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 09 11 	jmp	0x2212	; 0x2212 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 25 11 	jmp	0x224a	; 0x224a <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 11 11 	jmp	0x2222	; 0x2222 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__epilogue_restores__+0x10>

0000077a <__nesf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 15 11 	jmp	0x222a	; 0x222a <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__nesf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__nesf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__nesf2+0x58>
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 31 11 	jmp	0x2262	; 0x2262 <__epilogue_restores__+0x18>

000007da <__gtsf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 15 11 	jmp	0x222a	; 0x222a <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gtsf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gtsf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gtsf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 31 11 	jmp	0x2262	; 0x2262 <__epilogue_restores__+0x18>

0000083a <__gesf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 15 11 	jmp	0x222a	; 0x222a <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	8f ef       	ldi	r24, 0xFF	; 255
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 31 11 	jmp	0x2262	; 0x2262 <__epilogue_restores__+0x18>

0000089a <__ltsf2>:
     89a:	a8 e1       	ldi	r26, 0x18	; 24
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 15 11 	jmp	0x222a	; 0x222a <__prologue_saves__+0x18>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	2d 83       	std	Y+5, r18	; 0x05
     8b0:	3e 83       	std	Y+6, r19	; 0x06
     8b2:	4f 83       	std	Y+7, r20	; 0x07
     8b4:	58 87       	std	Y+8, r21	; 0x08
     8b6:	89 e0       	ldi	r24, 0x09	; 9
     8b8:	e8 2e       	mov	r14, r24
     8ba:	f1 2c       	mov	r15, r1
     8bc:	ec 0e       	add	r14, r28
     8be:	fd 1e       	adc	r15, r29
     8c0:	ce 01       	movw	r24, r28
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	b7 01       	movw	r22, r14
     8c6:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__unpack_f>
     8ca:	8e 01       	movw	r16, r28
     8cc:	0f 5e       	subi	r16, 0xEF	; 239
     8ce:	1f 4f       	sbci	r17, 0xFF	; 255
     8d0:	ce 01       	movw	r24, r28
     8d2:	05 96       	adiw	r24, 0x05	; 5
     8d4:	b8 01       	movw	r22, r16
     8d6:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__unpack_f>
     8da:	89 85       	ldd	r24, Y+9	; 0x09
     8dc:	82 30       	cpi	r24, 0x02	; 2
     8de:	40 f0       	brcs	.+16     	; 0x8f0 <__ltsf2+0x56>
     8e0:	89 89       	ldd	r24, Y+17	; 0x11
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	28 f0       	brcs	.+10     	; 0x8f0 <__ltsf2+0x56>
     8e6:	c7 01       	movw	r24, r14
     8e8:	b8 01       	movw	r22, r16
     8ea:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__fpcmp_parts_f>
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <__ltsf2+0x58>
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	68 96       	adiw	r28, 0x18	; 24
     8f4:	e6 e0       	ldi	r30, 0x06	; 6
     8f6:	0c 94 31 11 	jmp	0x2262	; 0x2262 <__epilogue_restores__+0x18>

000008fa <__fixsfsi>:
     8fa:	ac e0       	ldi	r26, 0x0C	; 12
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e3 e8       	ldi	r30, 0x83	; 131
     900:	f4 e0       	ldi	r31, 0x04	; 4
     902:	0c 94 19 11 	jmp	0x2232	; 0x2232 <__prologue_saves__+0x20>
     906:	69 83       	std	Y+1, r22	; 0x01
     908:	7a 83       	std	Y+2, r23	; 0x02
     90a:	8b 83       	std	Y+3, r24	; 0x03
     90c:	9c 83       	std	Y+4, r25	; 0x04
     90e:	ce 01       	movw	r24, r28
     910:	01 96       	adiw	r24, 0x01	; 1
     912:	be 01       	movw	r22, r28
     914:	6b 5f       	subi	r22, 0xFB	; 251
     916:	7f 4f       	sbci	r23, 0xFF	; 255
     918:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__unpack_f>
     91c:	8d 81       	ldd	r24, Y+5	; 0x05
     91e:	82 30       	cpi	r24, 0x02	; 2
     920:	61 f1       	breq	.+88     	; 0x97a <__fixsfsi+0x80>
     922:	82 30       	cpi	r24, 0x02	; 2
     924:	50 f1       	brcs	.+84     	; 0x97a <__fixsfsi+0x80>
     926:	84 30       	cpi	r24, 0x04	; 4
     928:	21 f4       	brne	.+8      	; 0x932 <__fixsfsi+0x38>
     92a:	8e 81       	ldd	r24, Y+6	; 0x06
     92c:	88 23       	and	r24, r24
     92e:	51 f1       	breq	.+84     	; 0x984 <__fixsfsi+0x8a>
     930:	2e c0       	rjmp	.+92     	; 0x98e <__fixsfsi+0x94>
     932:	2f 81       	ldd	r18, Y+7	; 0x07
     934:	38 85       	ldd	r19, Y+8	; 0x08
     936:	37 fd       	sbrc	r19, 7
     938:	20 c0       	rjmp	.+64     	; 0x97a <__fixsfsi+0x80>
     93a:	6e 81       	ldd	r22, Y+6	; 0x06
     93c:	2f 31       	cpi	r18, 0x1F	; 31
     93e:	31 05       	cpc	r19, r1
     940:	1c f0       	brlt	.+6      	; 0x948 <__fixsfsi+0x4e>
     942:	66 23       	and	r22, r22
     944:	f9 f0       	breq	.+62     	; 0x984 <__fixsfsi+0x8a>
     946:	23 c0       	rjmp	.+70     	; 0x98e <__fixsfsi+0x94>
     948:	8e e1       	ldi	r24, 0x1E	; 30
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	82 1b       	sub	r24, r18
     94e:	93 0b       	sbc	r25, r19
     950:	29 85       	ldd	r18, Y+9	; 0x09
     952:	3a 85       	ldd	r19, Y+10	; 0x0a
     954:	4b 85       	ldd	r20, Y+11	; 0x0b
     956:	5c 85       	ldd	r21, Y+12	; 0x0c
     958:	04 c0       	rjmp	.+8      	; 0x962 <__fixsfsi+0x68>
     95a:	56 95       	lsr	r21
     95c:	47 95       	ror	r20
     95e:	37 95       	ror	r19
     960:	27 95       	ror	r18
     962:	8a 95       	dec	r24
     964:	d2 f7       	brpl	.-12     	; 0x95a <__fixsfsi+0x60>
     966:	66 23       	and	r22, r22
     968:	b1 f0       	breq	.+44     	; 0x996 <__fixsfsi+0x9c>
     96a:	50 95       	com	r21
     96c:	40 95       	com	r20
     96e:	30 95       	com	r19
     970:	21 95       	neg	r18
     972:	3f 4f       	sbci	r19, 0xFF	; 255
     974:	4f 4f       	sbci	r20, 0xFF	; 255
     976:	5f 4f       	sbci	r21, 0xFF	; 255
     978:	0e c0       	rjmp	.+28     	; 0x996 <__fixsfsi+0x9c>
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	09 c0       	rjmp	.+18     	; 0x996 <__fixsfsi+0x9c>
     984:	2f ef       	ldi	r18, 0xFF	; 255
     986:	3f ef       	ldi	r19, 0xFF	; 255
     988:	4f ef       	ldi	r20, 0xFF	; 255
     98a:	5f e7       	ldi	r21, 0x7F	; 127
     98c:	04 c0       	rjmp	.+8      	; 0x996 <__fixsfsi+0x9c>
     98e:	20 e0       	ldi	r18, 0x00	; 0
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	40 e0       	ldi	r20, 0x00	; 0
     994:	50 e8       	ldi	r21, 0x80	; 128
     996:	b9 01       	movw	r22, r18
     998:	ca 01       	movw	r24, r20
     99a:	2c 96       	adiw	r28, 0x0c	; 12
     99c:	e2 e0       	ldi	r30, 0x02	; 2
     99e:	0c 94 35 11 	jmp	0x226a	; 0x226a <__epilogue_restores__+0x20>

000009a2 <__pack_f>:
     9a2:	df 92       	push	r13
     9a4:	ef 92       	push	r14
     9a6:	ff 92       	push	r15
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	fc 01       	movw	r30, r24
     9ae:	e4 80       	ldd	r14, Z+4	; 0x04
     9b0:	f5 80       	ldd	r15, Z+5	; 0x05
     9b2:	06 81       	ldd	r16, Z+6	; 0x06
     9b4:	17 81       	ldd	r17, Z+7	; 0x07
     9b6:	d1 80       	ldd	r13, Z+1	; 0x01
     9b8:	80 81       	ld	r24, Z
     9ba:	82 30       	cpi	r24, 0x02	; 2
     9bc:	48 f4       	brcc	.+18     	; 0x9d0 <__pack_f+0x2e>
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	a0 e1       	ldi	r26, 0x10	; 16
     9c4:	b0 e0       	ldi	r27, 0x00	; 0
     9c6:	e8 2a       	or	r14, r24
     9c8:	f9 2a       	or	r15, r25
     9ca:	0a 2b       	or	r16, r26
     9cc:	1b 2b       	or	r17, r27
     9ce:	a5 c0       	rjmp	.+330    	; 0xb1a <__pack_f+0x178>
     9d0:	84 30       	cpi	r24, 0x04	; 4
     9d2:	09 f4       	brne	.+2      	; 0x9d6 <__pack_f+0x34>
     9d4:	9f c0       	rjmp	.+318    	; 0xb14 <__pack_f+0x172>
     9d6:	82 30       	cpi	r24, 0x02	; 2
     9d8:	21 f4       	brne	.+8      	; 0x9e2 <__pack_f+0x40>
     9da:	ee 24       	eor	r14, r14
     9dc:	ff 24       	eor	r15, r15
     9de:	87 01       	movw	r16, r14
     9e0:	05 c0       	rjmp	.+10     	; 0x9ec <__pack_f+0x4a>
     9e2:	e1 14       	cp	r14, r1
     9e4:	f1 04       	cpc	r15, r1
     9e6:	01 05       	cpc	r16, r1
     9e8:	11 05       	cpc	r17, r1
     9ea:	19 f4       	brne	.+6      	; 0x9f2 <__pack_f+0x50>
     9ec:	e0 e0       	ldi	r30, 0x00	; 0
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	96 c0       	rjmp	.+300    	; 0xb1e <__pack_f+0x17c>
     9f2:	62 81       	ldd	r22, Z+2	; 0x02
     9f4:	73 81       	ldd	r23, Z+3	; 0x03
     9f6:	9f ef       	ldi	r25, 0xFF	; 255
     9f8:	62 38       	cpi	r22, 0x82	; 130
     9fa:	79 07       	cpc	r23, r25
     9fc:	0c f0       	brlt	.+2      	; 0xa00 <__pack_f+0x5e>
     9fe:	5b c0       	rjmp	.+182    	; 0xab6 <__pack_f+0x114>
     a00:	22 e8       	ldi	r18, 0x82	; 130
     a02:	3f ef       	ldi	r19, 0xFF	; 255
     a04:	26 1b       	sub	r18, r22
     a06:	37 0b       	sbc	r19, r23
     a08:	2a 31       	cpi	r18, 0x1A	; 26
     a0a:	31 05       	cpc	r19, r1
     a0c:	2c f0       	brlt	.+10     	; 0xa18 <__pack_f+0x76>
     a0e:	20 e0       	ldi	r18, 0x00	; 0
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	50 e0       	ldi	r21, 0x00	; 0
     a16:	2a c0       	rjmp	.+84     	; 0xa6c <__pack_f+0xca>
     a18:	b8 01       	movw	r22, r16
     a1a:	a7 01       	movw	r20, r14
     a1c:	02 2e       	mov	r0, r18
     a1e:	04 c0       	rjmp	.+8      	; 0xa28 <__pack_f+0x86>
     a20:	76 95       	lsr	r23
     a22:	67 95       	ror	r22
     a24:	57 95       	ror	r21
     a26:	47 95       	ror	r20
     a28:	0a 94       	dec	r0
     a2a:	d2 f7       	brpl	.-12     	; 0xa20 <__pack_f+0x7e>
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	a0 e0       	ldi	r26, 0x00	; 0
     a32:	b0 e0       	ldi	r27, 0x00	; 0
     a34:	04 c0       	rjmp	.+8      	; 0xa3e <__pack_f+0x9c>
     a36:	88 0f       	add	r24, r24
     a38:	99 1f       	adc	r25, r25
     a3a:	aa 1f       	adc	r26, r26
     a3c:	bb 1f       	adc	r27, r27
     a3e:	2a 95       	dec	r18
     a40:	d2 f7       	brpl	.-12     	; 0xa36 <__pack_f+0x94>
     a42:	01 97       	sbiw	r24, 0x01	; 1
     a44:	a1 09       	sbc	r26, r1
     a46:	b1 09       	sbc	r27, r1
     a48:	8e 21       	and	r24, r14
     a4a:	9f 21       	and	r25, r15
     a4c:	a0 23       	and	r26, r16
     a4e:	b1 23       	and	r27, r17
     a50:	00 97       	sbiw	r24, 0x00	; 0
     a52:	a1 05       	cpc	r26, r1
     a54:	b1 05       	cpc	r27, r1
     a56:	21 f0       	breq	.+8      	; 0xa60 <__pack_f+0xbe>
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	a0 e0       	ldi	r26, 0x00	; 0
     a5e:	b0 e0       	ldi	r27, 0x00	; 0
     a60:	9a 01       	movw	r18, r20
     a62:	ab 01       	movw	r20, r22
     a64:	28 2b       	or	r18, r24
     a66:	39 2b       	or	r19, r25
     a68:	4a 2b       	or	r20, r26
     a6a:	5b 2b       	or	r21, r27
     a6c:	da 01       	movw	r26, r20
     a6e:	c9 01       	movw	r24, r18
     a70:	8f 77       	andi	r24, 0x7F	; 127
     a72:	90 70       	andi	r25, 0x00	; 0
     a74:	a0 70       	andi	r26, 0x00	; 0
     a76:	b0 70       	andi	r27, 0x00	; 0
     a78:	80 34       	cpi	r24, 0x40	; 64
     a7a:	91 05       	cpc	r25, r1
     a7c:	a1 05       	cpc	r26, r1
     a7e:	b1 05       	cpc	r27, r1
     a80:	39 f4       	brne	.+14     	; 0xa90 <__pack_f+0xee>
     a82:	27 ff       	sbrs	r18, 7
     a84:	09 c0       	rjmp	.+18     	; 0xa98 <__pack_f+0xf6>
     a86:	20 5c       	subi	r18, 0xC0	; 192
     a88:	3f 4f       	sbci	r19, 0xFF	; 255
     a8a:	4f 4f       	sbci	r20, 0xFF	; 255
     a8c:	5f 4f       	sbci	r21, 0xFF	; 255
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__pack_f+0xf6>
     a90:	21 5c       	subi	r18, 0xC1	; 193
     a92:	3f 4f       	sbci	r19, 0xFF	; 255
     a94:	4f 4f       	sbci	r20, 0xFF	; 255
     a96:	5f 4f       	sbci	r21, 0xFF	; 255
     a98:	e0 e0       	ldi	r30, 0x00	; 0
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	20 30       	cpi	r18, 0x00	; 0
     a9e:	a0 e0       	ldi	r26, 0x00	; 0
     aa0:	3a 07       	cpc	r19, r26
     aa2:	a0 e0       	ldi	r26, 0x00	; 0
     aa4:	4a 07       	cpc	r20, r26
     aa6:	a0 e4       	ldi	r26, 0x40	; 64
     aa8:	5a 07       	cpc	r21, r26
     aaa:	10 f0       	brcs	.+4      	; 0xab0 <__pack_f+0x10e>
     aac:	e1 e0       	ldi	r30, 0x01	; 1
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	79 01       	movw	r14, r18
     ab2:	8a 01       	movw	r16, r20
     ab4:	27 c0       	rjmp	.+78     	; 0xb04 <__pack_f+0x162>
     ab6:	60 38       	cpi	r22, 0x80	; 128
     ab8:	71 05       	cpc	r23, r1
     aba:	64 f5       	brge	.+88     	; 0xb14 <__pack_f+0x172>
     abc:	fb 01       	movw	r30, r22
     abe:	e1 58       	subi	r30, 0x81	; 129
     ac0:	ff 4f       	sbci	r31, 0xFF	; 255
     ac2:	d8 01       	movw	r26, r16
     ac4:	c7 01       	movw	r24, r14
     ac6:	8f 77       	andi	r24, 0x7F	; 127
     ac8:	90 70       	andi	r25, 0x00	; 0
     aca:	a0 70       	andi	r26, 0x00	; 0
     acc:	b0 70       	andi	r27, 0x00	; 0
     ace:	80 34       	cpi	r24, 0x40	; 64
     ad0:	91 05       	cpc	r25, r1
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	39 f4       	brne	.+14     	; 0xae6 <__pack_f+0x144>
     ad8:	e7 fe       	sbrs	r14, 7
     ada:	0d c0       	rjmp	.+26     	; 0xaf6 <__pack_f+0x154>
     adc:	80 e4       	ldi	r24, 0x40	; 64
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	a0 e0       	ldi	r26, 0x00	; 0
     ae2:	b0 e0       	ldi	r27, 0x00	; 0
     ae4:	04 c0       	rjmp	.+8      	; 0xaee <__pack_f+0x14c>
     ae6:	8f e3       	ldi	r24, 0x3F	; 63
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	e8 0e       	add	r14, r24
     af0:	f9 1e       	adc	r15, r25
     af2:	0a 1f       	adc	r16, r26
     af4:	1b 1f       	adc	r17, r27
     af6:	17 ff       	sbrs	r17, 7
     af8:	05 c0       	rjmp	.+10     	; 0xb04 <__pack_f+0x162>
     afa:	16 95       	lsr	r17
     afc:	07 95       	ror	r16
     afe:	f7 94       	ror	r15
     b00:	e7 94       	ror	r14
     b02:	31 96       	adiw	r30, 0x01	; 1
     b04:	87 e0       	ldi	r24, 0x07	; 7
     b06:	16 95       	lsr	r17
     b08:	07 95       	ror	r16
     b0a:	f7 94       	ror	r15
     b0c:	e7 94       	ror	r14
     b0e:	8a 95       	dec	r24
     b10:	d1 f7       	brne	.-12     	; 0xb06 <__pack_f+0x164>
     b12:	05 c0       	rjmp	.+10     	; 0xb1e <__pack_f+0x17c>
     b14:	ee 24       	eor	r14, r14
     b16:	ff 24       	eor	r15, r15
     b18:	87 01       	movw	r16, r14
     b1a:	ef ef       	ldi	r30, 0xFF	; 255
     b1c:	f0 e0       	ldi	r31, 0x00	; 0
     b1e:	6e 2f       	mov	r22, r30
     b20:	67 95       	ror	r22
     b22:	66 27       	eor	r22, r22
     b24:	67 95       	ror	r22
     b26:	90 2f       	mov	r25, r16
     b28:	9f 77       	andi	r25, 0x7F	; 127
     b2a:	d7 94       	ror	r13
     b2c:	dd 24       	eor	r13, r13
     b2e:	d7 94       	ror	r13
     b30:	8e 2f       	mov	r24, r30
     b32:	86 95       	lsr	r24
     b34:	49 2f       	mov	r20, r25
     b36:	46 2b       	or	r20, r22
     b38:	58 2f       	mov	r21, r24
     b3a:	5d 29       	or	r21, r13
     b3c:	b7 01       	movw	r22, r14
     b3e:	ca 01       	movw	r24, r20
     b40:	1f 91       	pop	r17
     b42:	0f 91       	pop	r16
     b44:	ff 90       	pop	r15
     b46:	ef 90       	pop	r14
     b48:	df 90       	pop	r13
     b4a:	08 95       	ret

00000b4c <__unpack_f>:
     b4c:	fc 01       	movw	r30, r24
     b4e:	db 01       	movw	r26, r22
     b50:	40 81       	ld	r20, Z
     b52:	51 81       	ldd	r21, Z+1	; 0x01
     b54:	22 81       	ldd	r18, Z+2	; 0x02
     b56:	62 2f       	mov	r22, r18
     b58:	6f 77       	andi	r22, 0x7F	; 127
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	22 1f       	adc	r18, r18
     b5e:	22 27       	eor	r18, r18
     b60:	22 1f       	adc	r18, r18
     b62:	93 81       	ldd	r25, Z+3	; 0x03
     b64:	89 2f       	mov	r24, r25
     b66:	88 0f       	add	r24, r24
     b68:	82 2b       	or	r24, r18
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	99 1f       	adc	r25, r25
     b70:	99 27       	eor	r25, r25
     b72:	99 1f       	adc	r25, r25
     b74:	11 96       	adiw	r26, 0x01	; 1
     b76:	9c 93       	st	X, r25
     b78:	11 97       	sbiw	r26, 0x01	; 1
     b7a:	21 15       	cp	r18, r1
     b7c:	31 05       	cpc	r19, r1
     b7e:	a9 f5       	brne	.+106    	; 0xbea <__unpack_f+0x9e>
     b80:	41 15       	cp	r20, r1
     b82:	51 05       	cpc	r21, r1
     b84:	61 05       	cpc	r22, r1
     b86:	71 05       	cpc	r23, r1
     b88:	11 f4       	brne	.+4      	; 0xb8e <__unpack_f+0x42>
     b8a:	82 e0       	ldi	r24, 0x02	; 2
     b8c:	37 c0       	rjmp	.+110    	; 0xbfc <__unpack_f+0xb0>
     b8e:	82 e8       	ldi	r24, 0x82	; 130
     b90:	9f ef       	ldi	r25, 0xFF	; 255
     b92:	13 96       	adiw	r26, 0x03	; 3
     b94:	9c 93       	st	X, r25
     b96:	8e 93       	st	-X, r24
     b98:	12 97       	sbiw	r26, 0x02	; 2
     b9a:	9a 01       	movw	r18, r20
     b9c:	ab 01       	movw	r20, r22
     b9e:	67 e0       	ldi	r22, 0x07	; 7
     ba0:	22 0f       	add	r18, r18
     ba2:	33 1f       	adc	r19, r19
     ba4:	44 1f       	adc	r20, r20
     ba6:	55 1f       	adc	r21, r21
     ba8:	6a 95       	dec	r22
     baa:	d1 f7       	brne	.-12     	; 0xba0 <__unpack_f+0x54>
     bac:	83 e0       	ldi	r24, 0x03	; 3
     bae:	8c 93       	st	X, r24
     bb0:	0d c0       	rjmp	.+26     	; 0xbcc <__unpack_f+0x80>
     bb2:	22 0f       	add	r18, r18
     bb4:	33 1f       	adc	r19, r19
     bb6:	44 1f       	adc	r20, r20
     bb8:	55 1f       	adc	r21, r21
     bba:	12 96       	adiw	r26, 0x02	; 2
     bbc:	8d 91       	ld	r24, X+
     bbe:	9c 91       	ld	r25, X
     bc0:	13 97       	sbiw	r26, 0x03	; 3
     bc2:	01 97       	sbiw	r24, 0x01	; 1
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	9c 93       	st	X, r25
     bc8:	8e 93       	st	-X, r24
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	38 07       	cpc	r19, r24
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	48 07       	cpc	r20, r24
     bd6:	80 e4       	ldi	r24, 0x40	; 64
     bd8:	58 07       	cpc	r21, r24
     bda:	58 f3       	brcs	.-42     	; 0xbb2 <__unpack_f+0x66>
     bdc:	14 96       	adiw	r26, 0x04	; 4
     bde:	2d 93       	st	X+, r18
     be0:	3d 93       	st	X+, r19
     be2:	4d 93       	st	X+, r20
     be4:	5c 93       	st	X, r21
     be6:	17 97       	sbiw	r26, 0x07	; 7
     be8:	08 95       	ret
     bea:	2f 3f       	cpi	r18, 0xFF	; 255
     bec:	31 05       	cpc	r19, r1
     bee:	79 f4       	brne	.+30     	; 0xc0e <__unpack_f+0xc2>
     bf0:	41 15       	cp	r20, r1
     bf2:	51 05       	cpc	r21, r1
     bf4:	61 05       	cpc	r22, r1
     bf6:	71 05       	cpc	r23, r1
     bf8:	19 f4       	brne	.+6      	; 0xc00 <__unpack_f+0xb4>
     bfa:	84 e0       	ldi	r24, 0x04	; 4
     bfc:	8c 93       	st	X, r24
     bfe:	08 95       	ret
     c00:	64 ff       	sbrs	r22, 4
     c02:	03 c0       	rjmp	.+6      	; 0xc0a <__unpack_f+0xbe>
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	8c 93       	st	X, r24
     c08:	12 c0       	rjmp	.+36     	; 0xc2e <__unpack_f+0xe2>
     c0a:	1c 92       	st	X, r1
     c0c:	10 c0       	rjmp	.+32     	; 0xc2e <__unpack_f+0xe2>
     c0e:	2f 57       	subi	r18, 0x7F	; 127
     c10:	30 40       	sbci	r19, 0x00	; 0
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	3c 93       	st	X, r19
     c16:	2e 93       	st	-X, r18
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	83 e0       	ldi	r24, 0x03	; 3
     c1c:	8c 93       	st	X, r24
     c1e:	87 e0       	ldi	r24, 0x07	; 7
     c20:	44 0f       	add	r20, r20
     c22:	55 1f       	adc	r21, r21
     c24:	66 1f       	adc	r22, r22
     c26:	77 1f       	adc	r23, r23
     c28:	8a 95       	dec	r24
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0xd4>
     c2c:	70 64       	ori	r23, 0x40	; 64
     c2e:	14 96       	adiw	r26, 0x04	; 4
     c30:	4d 93       	st	X+, r20
     c32:	5d 93       	st	X+, r21
     c34:	6d 93       	st	X+, r22
     c36:	7c 93       	st	X, r23
     c38:	17 97       	sbiw	r26, 0x07	; 7
     c3a:	08 95       	ret

00000c3c <__fpcmp_parts_f>:
     c3c:	1f 93       	push	r17
     c3e:	dc 01       	movw	r26, r24
     c40:	fb 01       	movw	r30, r22
     c42:	9c 91       	ld	r25, X
     c44:	92 30       	cpi	r25, 0x02	; 2
     c46:	08 f4       	brcc	.+2      	; 0xc4a <__fpcmp_parts_f+0xe>
     c48:	47 c0       	rjmp	.+142    	; 0xcd8 <__fpcmp_parts_f+0x9c>
     c4a:	80 81       	ld	r24, Z
     c4c:	82 30       	cpi	r24, 0x02	; 2
     c4e:	08 f4       	brcc	.+2      	; 0xc52 <__fpcmp_parts_f+0x16>
     c50:	43 c0       	rjmp	.+134    	; 0xcd8 <__fpcmp_parts_f+0x9c>
     c52:	94 30       	cpi	r25, 0x04	; 4
     c54:	51 f4       	brne	.+20     	; 0xc6a <__fpcmp_parts_f+0x2e>
     c56:	11 96       	adiw	r26, 0x01	; 1
     c58:	1c 91       	ld	r17, X
     c5a:	84 30       	cpi	r24, 0x04	; 4
     c5c:	99 f5       	brne	.+102    	; 0xcc4 <__fpcmp_parts_f+0x88>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	68 2f       	mov	r22, r24
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	61 1b       	sub	r22, r17
     c66:	71 09       	sbc	r23, r1
     c68:	3f c0       	rjmp	.+126    	; 0xce8 <__fpcmp_parts_f+0xac>
     c6a:	84 30       	cpi	r24, 0x04	; 4
     c6c:	21 f0       	breq	.+8      	; 0xc76 <__fpcmp_parts_f+0x3a>
     c6e:	92 30       	cpi	r25, 0x02	; 2
     c70:	31 f4       	brne	.+12     	; 0xc7e <__fpcmp_parts_f+0x42>
     c72:	82 30       	cpi	r24, 0x02	; 2
     c74:	b9 f1       	breq	.+110    	; 0xce4 <__fpcmp_parts_f+0xa8>
     c76:	81 81       	ldd	r24, Z+1	; 0x01
     c78:	88 23       	and	r24, r24
     c7a:	89 f1       	breq	.+98     	; 0xcde <__fpcmp_parts_f+0xa2>
     c7c:	2d c0       	rjmp	.+90     	; 0xcd8 <__fpcmp_parts_f+0x9c>
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	1c 91       	ld	r17, X
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	82 30       	cpi	r24, 0x02	; 2
     c86:	f1 f0       	breq	.+60     	; 0xcc4 <__fpcmp_parts_f+0x88>
     c88:	81 81       	ldd	r24, Z+1	; 0x01
     c8a:	18 17       	cp	r17, r24
     c8c:	d9 f4       	brne	.+54     	; 0xcc4 <__fpcmp_parts_f+0x88>
     c8e:	12 96       	adiw	r26, 0x02	; 2
     c90:	2d 91       	ld	r18, X+
     c92:	3c 91       	ld	r19, X
     c94:	13 97       	sbiw	r26, 0x03	; 3
     c96:	82 81       	ldd	r24, Z+2	; 0x02
     c98:	93 81       	ldd	r25, Z+3	; 0x03
     c9a:	82 17       	cp	r24, r18
     c9c:	93 07       	cpc	r25, r19
     c9e:	94 f0       	brlt	.+36     	; 0xcc4 <__fpcmp_parts_f+0x88>
     ca0:	28 17       	cp	r18, r24
     ca2:	39 07       	cpc	r19, r25
     ca4:	bc f0       	brlt	.+46     	; 0xcd4 <__fpcmp_parts_f+0x98>
     ca6:	14 96       	adiw	r26, 0x04	; 4
     ca8:	8d 91       	ld	r24, X+
     caa:	9d 91       	ld	r25, X+
     cac:	0d 90       	ld	r0, X+
     cae:	bc 91       	ld	r27, X
     cb0:	a0 2d       	mov	r26, r0
     cb2:	24 81       	ldd	r18, Z+4	; 0x04
     cb4:	35 81       	ldd	r19, Z+5	; 0x05
     cb6:	46 81       	ldd	r20, Z+6	; 0x06
     cb8:	57 81       	ldd	r21, Z+7	; 0x07
     cba:	28 17       	cp	r18, r24
     cbc:	39 07       	cpc	r19, r25
     cbe:	4a 07       	cpc	r20, r26
     cc0:	5b 07       	cpc	r21, r27
     cc2:	18 f4       	brcc	.+6      	; 0xcca <__fpcmp_parts_f+0x8e>
     cc4:	11 23       	and	r17, r17
     cc6:	41 f0       	breq	.+16     	; 0xcd8 <__fpcmp_parts_f+0x9c>
     cc8:	0a c0       	rjmp	.+20     	; 0xcde <__fpcmp_parts_f+0xa2>
     cca:	82 17       	cp	r24, r18
     ccc:	93 07       	cpc	r25, r19
     cce:	a4 07       	cpc	r26, r20
     cd0:	b5 07       	cpc	r27, r21
     cd2:	40 f4       	brcc	.+16     	; 0xce4 <__fpcmp_parts_f+0xa8>
     cd4:	11 23       	and	r17, r17
     cd6:	19 f0       	breq	.+6      	; 0xcde <__fpcmp_parts_f+0xa2>
     cd8:	61 e0       	ldi	r22, 0x01	; 1
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	05 c0       	rjmp	.+10     	; 0xce8 <__fpcmp_parts_f+0xac>
     cde:	6f ef       	ldi	r22, 0xFF	; 255
     ce0:	7f ef       	ldi	r23, 0xFF	; 255
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <__fpcmp_parts_f+0xac>
     ce4:	60 e0       	ldi	r22, 0x00	; 0
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	cb 01       	movw	r24, r22
     cea:	1f 91       	pop	r17
     cec:	08 95       	ret

00000cee <DIO_u8Set_Pin_value>:
#include"DIO_Private.h"
#include"DIO_Config.h"
#include"DIO_Interface.h"

u8 DIO_u8Set_Pin_value(u8 Copy_u8_Port_ID,u8 Copy_u8_Pin_ID,u8 Copy_u8_val)
{
     cee:	df 93       	push	r29
     cf0:	cf 93       	push	r28
     cf2:	00 d0       	rcall	.+0      	; 0xcf4 <DIO_u8Set_Pin_value+0x6>
     cf4:	00 d0       	rcall	.+0      	; 0xcf6 <DIO_u8Set_Pin_value+0x8>
     cf6:	00 d0       	rcall	.+0      	; 0xcf8 <DIO_u8Set_Pin_value+0xa>
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
     cfc:	8a 83       	std	Y+2, r24	; 0x02
     cfe:	6b 83       	std	Y+3, r22	; 0x03
     d00:	4c 83       	std	Y+4, r20	; 0x04
	u8 loc_u8Error_State=DIO_u8PORT_INIT_ERR;
     d02:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID>=DIO_MIN_u8_PORT_ID)&&(Copy_u8_Port_ID<=DIO_MAX_u8_PORT_ID))
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	84 30       	cpi	r24, 0x04	; 4
     d08:	08 f0       	brcs	.+2      	; 0xd0c <DIO_u8Set_Pin_value+0x1e>
     d0a:	e3 c0       	rjmp	.+454    	; 0xed2 <DIO_u8Set_Pin_value+0x1e4>
	{
		if((Copy_u8_Pin_ID>=DIO_MIN_u8_PIN_ID)&&(Copy_u8_Pin_ID<=DIO_MAX_u8_PIN_ID))
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	88 30       	cpi	r24, 0x08	; 8
     d10:	08 f0       	brcs	.+2      	; 0xd14 <DIO_u8Set_Pin_value+0x26>
     d12:	dc c0       	rjmp	.+440    	; 0xecc <DIO_u8Set_Pin_value+0x1de>
		{
			if((Copy_u8_val==DIO_MIN_u8_PIN_Val)||(Copy_u8_val==DIO_MAX_u8_PIN_Val))
     d14:	8c 81       	ldd	r24, Y+4	; 0x04
     d16:	88 23       	and	r24, r24
     d18:	21 f0       	breq	.+8      	; 0xd22 <DIO_u8Set_Pin_value+0x34>
     d1a:	8c 81       	ldd	r24, Y+4	; 0x04
     d1c:	81 30       	cpi	r24, 0x01	; 1
     d1e:	09 f0       	breq	.+2      	; 0xd22 <DIO_u8Set_Pin_value+0x34>
     d20:	d2 c0       	rjmp	.+420    	; 0xec6 <DIO_u8Set_Pin_value+0x1d8>
			{
				switch(Copy_u8_Port_ID)
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	3e 83       	std	Y+6, r19	; 0x06
     d2a:	2d 83       	std	Y+5, r18	; 0x05
     d2c:	8d 81       	ldd	r24, Y+5	; 0x05
     d2e:	9e 81       	ldd	r25, Y+6	; 0x06
     d30:	81 30       	cpi	r24, 0x01	; 1
     d32:	91 05       	cpc	r25, r1
     d34:	09 f4       	brne	.+2      	; 0xd38 <DIO_u8Set_Pin_value+0x4a>
     d36:	43 c0       	rjmp	.+134    	; 0xdbe <DIO_u8Set_Pin_value+0xd0>
     d38:	2d 81       	ldd	r18, Y+5	; 0x05
     d3a:	3e 81       	ldd	r19, Y+6	; 0x06
     d3c:	22 30       	cpi	r18, 0x02	; 2
     d3e:	31 05       	cpc	r19, r1
     d40:	2c f4       	brge	.+10     	; 0xd4c <DIO_u8Set_Pin_value+0x5e>
     d42:	8d 81       	ldd	r24, Y+5	; 0x05
     d44:	9e 81       	ldd	r25, Y+6	; 0x06
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	71 f0       	breq	.+28     	; 0xd66 <DIO_u8Set_Pin_value+0x78>
     d4a:	c5 c0       	rjmp	.+394    	; 0xed6 <DIO_u8Set_Pin_value+0x1e8>
     d4c:	2d 81       	ldd	r18, Y+5	; 0x05
     d4e:	3e 81       	ldd	r19, Y+6	; 0x06
     d50:	22 30       	cpi	r18, 0x02	; 2
     d52:	31 05       	cpc	r19, r1
     d54:	09 f4       	brne	.+2      	; 0xd58 <DIO_u8Set_Pin_value+0x6a>
     d56:	5f c0       	rjmp	.+190    	; 0xe16 <DIO_u8Set_Pin_value+0x128>
     d58:	8d 81       	ldd	r24, Y+5	; 0x05
     d5a:	9e 81       	ldd	r25, Y+6	; 0x06
     d5c:	83 30       	cpi	r24, 0x03	; 3
     d5e:	91 05       	cpc	r25, r1
     d60:	09 f4       	brne	.+2      	; 0xd64 <DIO_u8Set_Pin_value+0x76>
     d62:	85 c0       	rjmp	.+266    	; 0xe6e <DIO_u8Set_Pin_value+0x180>
     d64:	b8 c0       	rjmp	.+368    	; 0xed6 <DIO_u8Set_Pin_value+0x1e8>
				{
				case GROUP_A:
					Assign_Bit(DIO_u8_PORTA,Copy_u8_Pin_ID,Copy_u8_val);
     d66:	8c 81       	ldd	r24, Y+4	; 0x04
     d68:	81 30       	cpi	r24, 0x01	; 1
     d6a:	a1 f4       	brne	.+40     	; 0xd94 <DIO_u8Set_Pin_value+0xa6>
     d6c:	ab e3       	ldi	r26, 0x3B	; 59
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	eb e3       	ldi	r30, 0x3B	; 59
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	48 2f       	mov	r20, r24
     d78:	8b 81       	ldd	r24, Y+3	; 0x03
     d7a:	28 2f       	mov	r18, r24
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	02 2e       	mov	r0, r18
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <DIO_u8Set_Pin_value+0x9c>
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	0a 94       	dec	r0
     d8c:	e2 f7       	brpl	.-8      	; 0xd86 <DIO_u8Set_Pin_value+0x98>
     d8e:	84 2b       	or	r24, r20
     d90:	8c 93       	st	X, r24
     d92:	a1 c0       	rjmp	.+322    	; 0xed6 <DIO_u8Set_Pin_value+0x1e8>
     d94:	ab e3       	ldi	r26, 0x3B	; 59
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	eb e3       	ldi	r30, 0x3B	; 59
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	48 2f       	mov	r20, r24
     da0:	8b 81       	ldd	r24, Y+3	; 0x03
     da2:	28 2f       	mov	r18, r24
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	02 2e       	mov	r0, r18
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <DIO_u8Set_Pin_value+0xc4>
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	0a 94       	dec	r0
     db4:	e2 f7       	brpl	.-8      	; 0xdae <DIO_u8Set_Pin_value+0xc0>
     db6:	80 95       	com	r24
     db8:	84 23       	and	r24, r20
     dba:	8c 93       	st	X, r24
     dbc:	8c c0       	rjmp	.+280    	; 0xed6 <DIO_u8Set_Pin_value+0x1e8>
					break;
				case GROUP_B:
					Assign_Bit(DIO_u8_PORTB,Copy_u8_Pin_ID,Copy_u8_val);
     dbe:	8c 81       	ldd	r24, Y+4	; 0x04
     dc0:	81 30       	cpi	r24, 0x01	; 1
     dc2:	a1 f4       	brne	.+40     	; 0xdec <DIO_u8Set_Pin_value+0xfe>
     dc4:	a8 e3       	ldi	r26, 0x38	; 56
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e8 e3       	ldi	r30, 0x38	; 56
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	48 2f       	mov	r20, r24
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	02 2e       	mov	r0, r18
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <DIO_u8Set_Pin_value+0xf4>
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	0a 94       	dec	r0
     de4:	e2 f7       	brpl	.-8      	; 0xdde <DIO_u8Set_Pin_value+0xf0>
     de6:	84 2b       	or	r24, r20
     de8:	8c 93       	st	X, r24
     dea:	75 c0       	rjmp	.+234    	; 0xed6 <DIO_u8Set_Pin_value+0x1e8>
     dec:	a8 e3       	ldi	r26, 0x38	; 56
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e8 e3       	ldi	r30, 0x38	; 56
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	48 2f       	mov	r20, r24
     df8:	8b 81       	ldd	r24, Y+3	; 0x03
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	02 2e       	mov	r0, r18
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <DIO_u8Set_Pin_value+0x11c>
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	0a 94       	dec	r0
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <DIO_u8Set_Pin_value+0x118>
     e0e:	80 95       	com	r24
     e10:	84 23       	and	r24, r20
     e12:	8c 93       	st	X, r24
     e14:	60 c0       	rjmp	.+192    	; 0xed6 <DIO_u8Set_Pin_value+0x1e8>
					break;
				case GROUP_C:
					Assign_Bit(DIO_u8_PORTC,Copy_u8_Pin_ID,Copy_u8_val);
     e16:	8c 81       	ldd	r24, Y+4	; 0x04
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	a1 f4       	brne	.+40     	; 0xe44 <DIO_u8Set_Pin_value+0x156>
     e1c:	a5 e3       	ldi	r26, 0x35	; 53
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e5 e3       	ldi	r30, 0x35	; 53
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	48 2f       	mov	r20, r24
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	28 2f       	mov	r18, r24
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	02 2e       	mov	r0, r18
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <DIO_u8Set_Pin_value+0x14c>
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	0a 94       	dec	r0
     e3c:	e2 f7       	brpl	.-8      	; 0xe36 <DIO_u8Set_Pin_value+0x148>
     e3e:	84 2b       	or	r24, r20
     e40:	8c 93       	st	X, r24
     e42:	49 c0       	rjmp	.+146    	; 0xed6 <DIO_u8Set_Pin_value+0x1e8>
     e44:	a5 e3       	ldi	r26, 0x35	; 53
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e5 e3       	ldi	r30, 0x35	; 53
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	48 2f       	mov	r20, r24
     e50:	8b 81       	ldd	r24, Y+3	; 0x03
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	02 2e       	mov	r0, r18
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <DIO_u8Set_Pin_value+0x174>
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	0a 94       	dec	r0
     e64:	e2 f7       	brpl	.-8      	; 0xe5e <DIO_u8Set_Pin_value+0x170>
     e66:	80 95       	com	r24
     e68:	84 23       	and	r24, r20
     e6a:	8c 93       	st	X, r24
     e6c:	34 c0       	rjmp	.+104    	; 0xed6 <DIO_u8Set_Pin_value+0x1e8>
					break;
				case GROUP_D:
					Assign_Bit(DIO_u8_PORTD,Copy_u8_Pin_ID,Copy_u8_val);
     e6e:	8c 81       	ldd	r24, Y+4	; 0x04
     e70:	81 30       	cpi	r24, 0x01	; 1
     e72:	a1 f4       	brne	.+40     	; 0xe9c <DIO_u8Set_Pin_value+0x1ae>
     e74:	a2 e3       	ldi	r26, 0x32	; 50
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e2 e3       	ldi	r30, 0x32	; 50
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	48 2f       	mov	r20, r24
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	02 2e       	mov	r0, r18
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <DIO_u8Set_Pin_value+0x1a4>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	0a 94       	dec	r0
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <DIO_u8Set_Pin_value+0x1a0>
     e96:	84 2b       	or	r24, r20
     e98:	8c 93       	st	X, r24
     e9a:	1d c0       	rjmp	.+58     	; 0xed6 <DIO_u8Set_Pin_value+0x1e8>
     e9c:	a2 e3       	ldi	r26, 0x32	; 50
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e2 e3       	ldi	r30, 0x32	; 50
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	48 2f       	mov	r20, r24
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	02 2e       	mov	r0, r18
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <DIO_u8Set_Pin_value+0x1cc>
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	0a 94       	dec	r0
     ebc:	e2 f7       	brpl	.-8      	; 0xeb6 <DIO_u8Set_Pin_value+0x1c8>
     ebe:	80 95       	com	r24
     ec0:	84 23       	and	r24, r20
     ec2:	8c 93       	st	X, r24
     ec4:	08 c0       	rjmp	.+16     	; 0xed6 <DIO_u8Set_Pin_value+0x1e8>
					break;
				}
			}else{
				loc_u8Error_State=DIO_u8Value_ID_ERR;
     ec6:	83 e0       	ldi	r24, 0x03	; 3
     ec8:	89 83       	std	Y+1, r24	; 0x01
     eca:	05 c0       	rjmp	.+10     	; 0xed6 <DIO_u8Set_Pin_value+0x1e8>
			}
		}else{
			loc_u8Error_State=DIO_u8PIN_ID_ERR;
     ecc:	82 e0       	ldi	r24, 0x02	; 2
     ece:	89 83       	std	Y+1, r24	; 0x01
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <DIO_u8Set_Pin_value+0x1e8>
		}
	}else{
		loc_u8Error_State=DIO_u8PORT_ID_ERR;
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	89 83       	std	Y+1, r24	; 0x01
	}
	return loc_u8Error_State;
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ed8:	26 96       	adiw	r28, 0x06	; 6
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	f8 94       	cli
     ede:	de bf       	out	0x3e, r29	; 62
     ee0:	0f be       	out	0x3f, r0	; 63
     ee2:	cd bf       	out	0x3d, r28	; 61
     ee4:	cf 91       	pop	r28
     ee6:	df 91       	pop	r29
     ee8:	08 95       	ret

00000eea <DIO_u8Set_Pin_direction>:
u8 DIO_u8Set_Pin_direction(u8 Copy_u8_Port_ID,u8 Copy_u8_Pin_ID, u8 Copy_u8_direction ){
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <DIO_u8Set_Pin_direction+0x6>
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <DIO_u8Set_Pin_direction+0x8>
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <DIO_u8Set_Pin_direction+0xa>
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	8a 83       	std	Y+2, r24	; 0x02
     efa:	6b 83       	std	Y+3, r22	; 0x03
     efc:	4c 83       	std	Y+4, r20	; 0x04
	u8 loc_u8Error_State=DIO_u8PORT_INIT_ERR;
     efe:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID>=DIO_MIN_u8_PORT_ID)&&(Copy_u8_Port_ID<=DIO_MAX_u8_PORT_ID))
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	84 30       	cpi	r24, 0x04	; 4
     f04:	08 f0       	brcs	.+2      	; 0xf08 <DIO_u8Set_Pin_direction+0x1e>
     f06:	e3 c0       	rjmp	.+454    	; 0x10ce <DIO_u8Set_Pin_direction+0x1e4>
	{
		if((Copy_u8_Pin_ID>=DIO_MIN_u8_PIN_ID)&&(Copy_u8_Pin_ID<=DIO_MAX_u8_PIN_ID))
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	88 30       	cpi	r24, 0x08	; 8
     f0c:	08 f0       	brcs	.+2      	; 0xf10 <DIO_u8Set_Pin_direction+0x26>
     f0e:	dc c0       	rjmp	.+440    	; 0x10c8 <DIO_u8Set_Pin_direction+0x1de>
		{
			if((Copy_u8_direction==DIO_MAX_u8_Direction)||(Copy_u8_direction==DIO_MIN_u8_Direction))
     f10:	8c 81       	ldd	r24, Y+4	; 0x04
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	21 f0       	breq	.+8      	; 0xf1e <DIO_u8Set_Pin_direction+0x34>
     f16:	8c 81       	ldd	r24, Y+4	; 0x04
     f18:	88 23       	and	r24, r24
     f1a:	09 f0       	breq	.+2      	; 0xf1e <DIO_u8Set_Pin_direction+0x34>
     f1c:	d2 c0       	rjmp	.+420    	; 0x10c2 <DIO_u8Set_Pin_direction+0x1d8>
			{
				switch(Copy_u8_Port_ID)
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	3e 83       	std	Y+6, r19	; 0x06
     f26:	2d 83       	std	Y+5, r18	; 0x05
     f28:	8d 81       	ldd	r24, Y+5	; 0x05
     f2a:	9e 81       	ldd	r25, Y+6	; 0x06
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	91 05       	cpc	r25, r1
     f30:	09 f4       	brne	.+2      	; 0xf34 <DIO_u8Set_Pin_direction+0x4a>
     f32:	43 c0       	rjmp	.+134    	; 0xfba <DIO_u8Set_Pin_direction+0xd0>
     f34:	2d 81       	ldd	r18, Y+5	; 0x05
     f36:	3e 81       	ldd	r19, Y+6	; 0x06
     f38:	22 30       	cpi	r18, 0x02	; 2
     f3a:	31 05       	cpc	r19, r1
     f3c:	2c f4       	brge	.+10     	; 0xf48 <DIO_u8Set_Pin_direction+0x5e>
     f3e:	8d 81       	ldd	r24, Y+5	; 0x05
     f40:	9e 81       	ldd	r25, Y+6	; 0x06
     f42:	00 97       	sbiw	r24, 0x00	; 0
     f44:	71 f0       	breq	.+28     	; 0xf62 <DIO_u8Set_Pin_direction+0x78>
     f46:	c5 c0       	rjmp	.+394    	; 0x10d2 <DIO_u8Set_Pin_direction+0x1e8>
     f48:	2d 81       	ldd	r18, Y+5	; 0x05
     f4a:	3e 81       	ldd	r19, Y+6	; 0x06
     f4c:	22 30       	cpi	r18, 0x02	; 2
     f4e:	31 05       	cpc	r19, r1
     f50:	09 f4       	brne	.+2      	; 0xf54 <DIO_u8Set_Pin_direction+0x6a>
     f52:	5f c0       	rjmp	.+190    	; 0x1012 <DIO_u8Set_Pin_direction+0x128>
     f54:	8d 81       	ldd	r24, Y+5	; 0x05
     f56:	9e 81       	ldd	r25, Y+6	; 0x06
     f58:	83 30       	cpi	r24, 0x03	; 3
     f5a:	91 05       	cpc	r25, r1
     f5c:	09 f4       	brne	.+2      	; 0xf60 <DIO_u8Set_Pin_direction+0x76>
     f5e:	85 c0       	rjmp	.+266    	; 0x106a <DIO_u8Set_Pin_direction+0x180>
     f60:	b8 c0       	rjmp	.+368    	; 0x10d2 <DIO_u8Set_Pin_direction+0x1e8>
				{
				case GROUP_A:
					Assign_Bit(DIO_u8_DDRA,Copy_u8_Pin_ID,Copy_u8_direction);
     f62:	8c 81       	ldd	r24, Y+4	; 0x04
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	a1 f4       	brne	.+40     	; 0xf90 <DIO_u8Set_Pin_direction+0xa6>
     f68:	aa e3       	ldi	r26, 0x3A	; 58
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	ea e3       	ldi	r30, 0x3A	; 58
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	48 2f       	mov	r20, r24
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	02 2e       	mov	r0, r18
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <DIO_u8Set_Pin_direction+0x9c>
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	0a 94       	dec	r0
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <DIO_u8Set_Pin_direction+0x98>
     f8a:	84 2b       	or	r24, r20
     f8c:	8c 93       	st	X, r24
     f8e:	a1 c0       	rjmp	.+322    	; 0x10d2 <DIO_u8Set_Pin_direction+0x1e8>
     f90:	aa e3       	ldi	r26, 0x3A	; 58
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	ea e3       	ldi	r30, 0x3A	; 58
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	48 2f       	mov	r20, r24
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	02 2e       	mov	r0, r18
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <DIO_u8Set_Pin_direction+0xc4>
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	0a 94       	dec	r0
     fb0:	e2 f7       	brpl	.-8      	; 0xfaa <DIO_u8Set_Pin_direction+0xc0>
     fb2:	80 95       	com	r24
     fb4:	84 23       	and	r24, r20
     fb6:	8c 93       	st	X, r24
     fb8:	8c c0       	rjmp	.+280    	; 0x10d2 <DIO_u8Set_Pin_direction+0x1e8>
					break;
				case GROUP_B:
					Assign_Bit(DIO_u8_DDRB,Copy_u8_Pin_ID,Copy_u8_direction);
     fba:	8c 81       	ldd	r24, Y+4	; 0x04
     fbc:	81 30       	cpi	r24, 0x01	; 1
     fbe:	a1 f4       	brne	.+40     	; 0xfe8 <DIO_u8Set_Pin_direction+0xfe>
     fc0:	a7 e3       	ldi	r26, 0x37	; 55
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e7 e3       	ldi	r30, 0x37	; 55
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 2e       	mov	r0, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <DIO_u8Set_Pin_direction+0xf4>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	0a 94       	dec	r0
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <DIO_u8Set_Pin_direction+0xf0>
     fe2:	84 2b       	or	r24, r20
     fe4:	8c 93       	st	X, r24
     fe6:	75 c0       	rjmp	.+234    	; 0x10d2 <DIO_u8Set_Pin_direction+0x1e8>
     fe8:	a7 e3       	ldi	r26, 0x37	; 55
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e7 e3       	ldi	r30, 0x37	; 55
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	48 2f       	mov	r20, r24
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	02 2e       	mov	r0, r18
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <DIO_u8Set_Pin_direction+0x11c>
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	0a 94       	dec	r0
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <DIO_u8Set_Pin_direction+0x118>
    100a:	80 95       	com	r24
    100c:	84 23       	and	r24, r20
    100e:	8c 93       	st	X, r24
    1010:	60 c0       	rjmp	.+192    	; 0x10d2 <DIO_u8Set_Pin_direction+0x1e8>
					break;
				case GROUP_C:
					Assign_Bit(DIO_u8_DDRC,Copy_u8_Pin_ID,Copy_u8_direction);
    1012:	8c 81       	ldd	r24, Y+4	; 0x04
    1014:	81 30       	cpi	r24, 0x01	; 1
    1016:	a1 f4       	brne	.+40     	; 0x1040 <DIO_u8Set_Pin_direction+0x156>
    1018:	a4 e3       	ldi	r26, 0x34	; 52
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e4 e3       	ldi	r30, 0x34	; 52
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	48 2f       	mov	r20, r24
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 2e       	mov	r0, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <DIO_u8Set_Pin_direction+0x14c>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	0a 94       	dec	r0
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <DIO_u8Set_Pin_direction+0x148>
    103a:	84 2b       	or	r24, r20
    103c:	8c 93       	st	X, r24
    103e:	49 c0       	rjmp	.+146    	; 0x10d2 <DIO_u8Set_Pin_direction+0x1e8>
    1040:	a4 e3       	ldi	r26, 0x34	; 52
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e4 e3       	ldi	r30, 0x34	; 52
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	48 2f       	mov	r20, r24
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	02 2e       	mov	r0, r18
    1058:	02 c0       	rjmp	.+4      	; 0x105e <DIO_u8Set_Pin_direction+0x174>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	0a 94       	dec	r0
    1060:	e2 f7       	brpl	.-8      	; 0x105a <DIO_u8Set_Pin_direction+0x170>
    1062:	80 95       	com	r24
    1064:	84 23       	and	r24, r20
    1066:	8c 93       	st	X, r24
    1068:	34 c0       	rjmp	.+104    	; 0x10d2 <DIO_u8Set_Pin_direction+0x1e8>
					break;
				case GROUP_D:
					Assign_Bit(DIO_u8_DDRD,Copy_u8_Pin_ID,Copy_u8_direction);
    106a:	8c 81       	ldd	r24, Y+4	; 0x04
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	a1 f4       	brne	.+40     	; 0x1098 <DIO_u8Set_Pin_direction+0x1ae>
    1070:	a1 e3       	ldi	r26, 0x31	; 49
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e1 e3       	ldi	r30, 0x31	; 49
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	48 2f       	mov	r20, r24
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 2e       	mov	r0, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <DIO_u8Set_Pin_direction+0x1a4>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <DIO_u8Set_Pin_direction+0x1a0>
    1092:	84 2b       	or	r24, r20
    1094:	8c 93       	st	X, r24
    1096:	1d c0       	rjmp	.+58     	; 0x10d2 <DIO_u8Set_Pin_direction+0x1e8>
    1098:	a1 e3       	ldi	r26, 0x31	; 49
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e1 e3       	ldi	r30, 0x31	; 49
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	48 2f       	mov	r20, r24
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 2e       	mov	r0, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <DIO_u8Set_Pin_direction+0x1cc>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	0a 94       	dec	r0
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <DIO_u8Set_Pin_direction+0x1c8>
    10ba:	80 95       	com	r24
    10bc:	84 23       	and	r24, r20
    10be:	8c 93       	st	X, r24
    10c0:	08 c0       	rjmp	.+16     	; 0x10d2 <DIO_u8Set_Pin_direction+0x1e8>
					break;
				}

			}else{
				loc_u8Error_State=DIO_u8Value_ID_ERR;
    10c2:	83 e0       	ldi	r24, 0x03	; 3
    10c4:	89 83       	std	Y+1, r24	; 0x01
    10c6:	05 c0       	rjmp	.+10     	; 0x10d2 <DIO_u8Set_Pin_direction+0x1e8>
			}

		}else{
			loc_u8Error_State=DIO_u8PIN_ID_ERR;
    10c8:	82 e0       	ldi	r24, 0x02	; 2
    10ca:	89 83       	std	Y+1, r24	; 0x01
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <DIO_u8Set_Pin_direction+0x1e8>
		}
	}else{
		loc_u8Error_State=DIO_u8PORT_ID_ERR;
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	89 83       	std	Y+1, r24	; 0x01
	}
	return loc_u8Error_State;
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    10d4:	26 96       	adiw	r28, 0x06	; 6
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	de bf       	out	0x3e, r29	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	cd bf       	out	0x3d, r28	; 61
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	08 95       	ret

000010e6 <DIO_u8Set_PORT_value>:
u8 DIO_u8Set_PORT_value(u8 Copy_u8_Port_ID, u8 Copy_u8_PORT_value)
{
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	00 d0       	rcall	.+0      	; 0x10ec <DIO_u8Set_PORT_value+0x6>
    10ec:	00 d0       	rcall	.+0      	; 0x10ee <DIO_u8Set_PORT_value+0x8>
    10ee:	0f 92       	push	r0
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	8a 83       	std	Y+2, r24	; 0x02
    10f6:	6b 83       	std	Y+3, r22	; 0x03
	u8 loc_u8Error_State=DIO_u8PORT_INIT_ERR;
    10f8:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID>=DIO_MIN_u8_PORT_ID)&&(Copy_u8_Port_ID<=DIO_MAX_u8_PORT_ID))
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	84 30       	cpi	r24, 0x04	; 4
    10fe:	98 f5       	brcc	.+102    	; 0x1166 <DIO_u8Set_PORT_value+0x80>
	{
		switch(Copy_u8_Port_ID)
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	3d 83       	std	Y+5, r19	; 0x05
    1108:	2c 83       	std	Y+4, r18	; 0x04
    110a:	8c 81       	ldd	r24, Y+4	; 0x04
    110c:	9d 81       	ldd	r25, Y+5	; 0x05
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	91 05       	cpc	r25, r1
    1112:	d1 f0       	breq	.+52     	; 0x1148 <DIO_u8Set_PORT_value+0x62>
    1114:	2c 81       	ldd	r18, Y+4	; 0x04
    1116:	3d 81       	ldd	r19, Y+5	; 0x05
    1118:	22 30       	cpi	r18, 0x02	; 2
    111a:	31 05       	cpc	r19, r1
    111c:	2c f4       	brge	.+10     	; 0x1128 <DIO_u8Set_PORT_value+0x42>
    111e:	8c 81       	ldd	r24, Y+4	; 0x04
    1120:	9d 81       	ldd	r25, Y+5	; 0x05
    1122:	00 97       	sbiw	r24, 0x00	; 0
    1124:	61 f0       	breq	.+24     	; 0x113e <DIO_u8Set_PORT_value+0x58>
    1126:	21 c0       	rjmp	.+66     	; 0x116a <DIO_u8Set_PORT_value+0x84>
    1128:	2c 81       	ldd	r18, Y+4	; 0x04
    112a:	3d 81       	ldd	r19, Y+5	; 0x05
    112c:	22 30       	cpi	r18, 0x02	; 2
    112e:	31 05       	cpc	r19, r1
    1130:	81 f0       	breq	.+32     	; 0x1152 <DIO_u8Set_PORT_value+0x6c>
    1132:	8c 81       	ldd	r24, Y+4	; 0x04
    1134:	9d 81       	ldd	r25, Y+5	; 0x05
    1136:	83 30       	cpi	r24, 0x03	; 3
    1138:	91 05       	cpc	r25, r1
    113a:	81 f0       	breq	.+32     	; 0x115c <DIO_u8Set_PORT_value+0x76>
    113c:	16 c0       	rjmp	.+44     	; 0x116a <DIO_u8Set_PORT_value+0x84>
		{
		case GROUP_A:
			DIO_u8_PORTA=Copy_u8_PORT_value;
    113e:	eb e3       	ldi	r30, 0x3B	; 59
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	80 83       	st	Z, r24
    1146:	11 c0       	rjmp	.+34     	; 0x116a <DIO_u8Set_PORT_value+0x84>
			break;
		case GROUP_B:
			DIO_u8_PORTB=Copy_u8_PORT_value;
    1148:	e8 e3       	ldi	r30, 0x38	; 56
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	8b 81       	ldd	r24, Y+3	; 0x03
    114e:	80 83       	st	Z, r24
    1150:	0c c0       	rjmp	.+24     	; 0x116a <DIO_u8Set_PORT_value+0x84>
			break;
		case GROUP_C:
			DIO_u8_PORTC=Copy_u8_PORT_value;
    1152:	e5 e3       	ldi	r30, 0x35	; 53
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	80 83       	st	Z, r24
    115a:	07 c0       	rjmp	.+14     	; 0x116a <DIO_u8Set_PORT_value+0x84>
			break;
		case GROUP_D:
			DIO_u8_PORTD=Copy_u8_PORT_value;
    115c:	e2 e3       	ldi	r30, 0x32	; 50
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	80 83       	st	Z, r24
    1164:	02 c0       	rjmp	.+4      	; 0x116a <DIO_u8Set_PORT_value+0x84>
			break;
		}
	}
	else
	{
		loc_u8Error_State=DIO_u8PORT_ID_ERR;
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	89 83       	std	Y+1, r24	; 0x01
	}
	return loc_u8Error_State;
    116a:	89 81       	ldd	r24, Y+1	; 0x01
}
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	08 95       	ret

0000117c <DIO_u8Set_PORT_direction>:
u8 DIO_u8Set_PORT_direction(u8 Copy_u8_Port_ID, u8 Copy_u8_PORT_direction)
{
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	00 d0       	rcall	.+0      	; 0x1182 <DIO_u8Set_PORT_direction+0x6>
    1182:	00 d0       	rcall	.+0      	; 0x1184 <DIO_u8Set_PORT_direction+0x8>
    1184:	0f 92       	push	r0
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
    118a:	8a 83       	std	Y+2, r24	; 0x02
    118c:	6b 83       	std	Y+3, r22	; 0x03
	u8 loc_u8Error_State=DIO_u8PORT_INIT_ERR;
    118e:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID>=DIO_MIN_u8_PORT_ID)&&(Copy_u8_Port_ID<=DIO_MAX_u8_PORT_ID))
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	84 30       	cpi	r24, 0x04	; 4
    1194:	98 f5       	brcc	.+102    	; 0x11fc <DIO_u8Set_PORT_direction+0x80>
	{
		switch(Copy_u8_Port_ID)
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	3d 83       	std	Y+5, r19	; 0x05
    119e:	2c 83       	std	Y+4, r18	; 0x04
    11a0:	8c 81       	ldd	r24, Y+4	; 0x04
    11a2:	9d 81       	ldd	r25, Y+5	; 0x05
    11a4:	81 30       	cpi	r24, 0x01	; 1
    11a6:	91 05       	cpc	r25, r1
    11a8:	d1 f0       	breq	.+52     	; 0x11de <DIO_u8Set_PORT_direction+0x62>
    11aa:	2c 81       	ldd	r18, Y+4	; 0x04
    11ac:	3d 81       	ldd	r19, Y+5	; 0x05
    11ae:	22 30       	cpi	r18, 0x02	; 2
    11b0:	31 05       	cpc	r19, r1
    11b2:	2c f4       	brge	.+10     	; 0x11be <DIO_u8Set_PORT_direction+0x42>
    11b4:	8c 81       	ldd	r24, Y+4	; 0x04
    11b6:	9d 81       	ldd	r25, Y+5	; 0x05
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	61 f0       	breq	.+24     	; 0x11d4 <DIO_u8Set_PORT_direction+0x58>
    11bc:	21 c0       	rjmp	.+66     	; 0x1200 <DIO_u8Set_PORT_direction+0x84>
    11be:	2c 81       	ldd	r18, Y+4	; 0x04
    11c0:	3d 81       	ldd	r19, Y+5	; 0x05
    11c2:	22 30       	cpi	r18, 0x02	; 2
    11c4:	31 05       	cpc	r19, r1
    11c6:	81 f0       	breq	.+32     	; 0x11e8 <DIO_u8Set_PORT_direction+0x6c>
    11c8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ca:	9d 81       	ldd	r25, Y+5	; 0x05
    11cc:	83 30       	cpi	r24, 0x03	; 3
    11ce:	91 05       	cpc	r25, r1
    11d0:	81 f0       	breq	.+32     	; 0x11f2 <DIO_u8Set_PORT_direction+0x76>
    11d2:	16 c0       	rjmp	.+44     	; 0x1200 <DIO_u8Set_PORT_direction+0x84>
		{
		case GROUP_A:
			DIO_u8_DDRA=Copy_u8_PORT_direction;
    11d4:	ea e3       	ldi	r30, 0x3A	; 58
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	80 83       	st	Z, r24
    11dc:	11 c0       	rjmp	.+34     	; 0x1200 <DIO_u8Set_PORT_direction+0x84>
			break;
		case GROUP_B:
			DIO_u8_DDRB=Copy_u8_PORT_direction;
    11de:	e7 e3       	ldi	r30, 0x37	; 55
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	80 83       	st	Z, r24
    11e6:	0c c0       	rjmp	.+24     	; 0x1200 <DIO_u8Set_PORT_direction+0x84>
			break;
		case GROUP_C:
			DIO_u8_DDRC=Copy_u8_PORT_direction;
    11e8:	e4 e3       	ldi	r30, 0x34	; 52
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	80 83       	st	Z, r24
    11f0:	07 c0       	rjmp	.+14     	; 0x1200 <DIO_u8Set_PORT_direction+0x84>
			break;
		case GROUP_D:
			DIO_u8_DDRD=Copy_u8_PORT_direction;
    11f2:	e1 e3       	ldi	r30, 0x31	; 49
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	80 83       	st	Z, r24
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <DIO_u8Set_PORT_direction+0x84>
			break;
		}
	}
	else
	{
		loc_u8Error_State=DIO_u8PORT_ID_ERR;
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	89 83       	std	Y+1, r24	; 0x01
	}
	return loc_u8Error_State;
    1200:	89 81       	ldd	r24, Y+1	; 0x01
}
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	08 95       	ret

00001212 <DIO_u8Get_Pin_value>:
u8 DIO_u8Get_Pin_value(u8 Copy_u8_Port_ID,u8 Copy_u8_Pin_ID,u8 *Copy_u8_val)
{
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	27 97       	sbiw	r28, 0x07	; 7
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	8a 83       	std	Y+2, r24	; 0x02
    1228:	6b 83       	std	Y+3, r22	; 0x03
    122a:	5d 83       	std	Y+5, r21	; 0x05
    122c:	4c 83       	std	Y+4, r20	; 0x04
	u8 loc_u8Error_State=DIO_u8PORT_INIT_ERR;
    122e:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID>=DIO_MIN_u8_PORT_ID)&&(Copy_u8_Port_ID<=DIO_MAX_u8_PORT_ID))
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	84 30       	cpi	r24, 0x04	; 4
    1234:	08 f0       	brcs	.+2      	; 0x1238 <DIO_u8Get_Pin_value+0x26>
    1236:	78 c0       	rjmp	.+240    	; 0x1328 <DIO_u8Get_Pin_value+0x116>
	{
		if((Copy_u8_Pin_ID>=DIO_MIN_u8_PIN_ID)&&(Copy_u8_Pin_ID<=DIO_MAX_u8_PIN_ID))
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	88 30       	cpi	r24, 0x08	; 8
    123c:	08 f0       	brcs	.+2      	; 0x1240 <DIO_u8Get_Pin_value+0x2e>
    123e:	71 c0       	rjmp	.+226    	; 0x1322 <DIO_u8Get_Pin_value+0x110>
		{
			switch(Copy_u8_Port_ID)
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	3f 83       	std	Y+7, r19	; 0x07
    1248:	2e 83       	std	Y+6, r18	; 0x06
    124a:	4e 81       	ldd	r20, Y+6	; 0x06
    124c:	5f 81       	ldd	r21, Y+7	; 0x07
    124e:	41 30       	cpi	r20, 0x01	; 1
    1250:	51 05       	cpc	r21, r1
    1252:	59 f1       	breq	.+86     	; 0x12aa <DIO_u8Get_Pin_value+0x98>
    1254:	8e 81       	ldd	r24, Y+6	; 0x06
    1256:	9f 81       	ldd	r25, Y+7	; 0x07
    1258:	82 30       	cpi	r24, 0x02	; 2
    125a:	91 05       	cpc	r25, r1
    125c:	34 f4       	brge	.+12     	; 0x126a <DIO_u8Get_Pin_value+0x58>
    125e:	2e 81       	ldd	r18, Y+6	; 0x06
    1260:	3f 81       	ldd	r19, Y+7	; 0x07
    1262:	21 15       	cp	r18, r1
    1264:	31 05       	cpc	r19, r1
    1266:	69 f0       	breq	.+26     	; 0x1282 <DIO_u8Get_Pin_value+0x70>
    1268:	61 c0       	rjmp	.+194    	; 0x132c <DIO_u8Get_Pin_value+0x11a>
    126a:	4e 81       	ldd	r20, Y+6	; 0x06
    126c:	5f 81       	ldd	r21, Y+7	; 0x07
    126e:	42 30       	cpi	r20, 0x02	; 2
    1270:	51 05       	cpc	r21, r1
    1272:	79 f1       	breq	.+94     	; 0x12d2 <DIO_u8Get_Pin_value+0xc0>
    1274:	8e 81       	ldd	r24, Y+6	; 0x06
    1276:	9f 81       	ldd	r25, Y+7	; 0x07
    1278:	83 30       	cpi	r24, 0x03	; 3
    127a:	91 05       	cpc	r25, r1
    127c:	09 f4       	brne	.+2      	; 0x1280 <DIO_u8Get_Pin_value+0x6e>
    127e:	3d c0       	rjmp	.+122    	; 0x12fa <DIO_u8Get_Pin_value+0xe8>
    1280:	55 c0       	rjmp	.+170    	; 0x132c <DIO_u8Get_Pin_value+0x11a>
			{
			case GROUP_A:
				*Copy_u8_val=Get_bit(DIO_u8_PINA,Copy_u8_Pin_ID);
    1282:	e9 e3       	ldi	r30, 0x39	; 57
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	88 2f       	mov	r24, r24
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	a9 01       	movw	r20, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <DIO_u8Get_Pin_value+0x88>
    1296:	55 95       	asr	r21
    1298:	47 95       	ror	r20
    129a:	8a 95       	dec	r24
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <DIO_u8Get_Pin_value+0x84>
    129e:	ca 01       	movw	r24, r20
    12a0:	81 70       	andi	r24, 0x01	; 1
    12a2:	ec 81       	ldd	r30, Y+4	; 0x04
    12a4:	fd 81       	ldd	r31, Y+5	; 0x05
    12a6:	80 83       	st	Z, r24
    12a8:	41 c0       	rjmp	.+130    	; 0x132c <DIO_u8Get_Pin_value+0x11a>
				break;
			case GROUP_B:
				*Copy_u8_val=Get_bit(DIO_u8_PINB,Copy_u8_Pin_ID);
    12aa:	e6 e3       	ldi	r30, 0x36	; 54
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	88 2f       	mov	r24, r24
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	a9 01       	movw	r20, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <DIO_u8Get_Pin_value+0xb0>
    12be:	55 95       	asr	r21
    12c0:	47 95       	ror	r20
    12c2:	8a 95       	dec	r24
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <DIO_u8Get_Pin_value+0xac>
    12c6:	ca 01       	movw	r24, r20
    12c8:	81 70       	andi	r24, 0x01	; 1
    12ca:	ec 81       	ldd	r30, Y+4	; 0x04
    12cc:	fd 81       	ldd	r31, Y+5	; 0x05
    12ce:	80 83       	st	Z, r24
    12d0:	2d c0       	rjmp	.+90     	; 0x132c <DIO_u8Get_Pin_value+0x11a>
				break;
			case GROUP_C:
				*Copy_u8_val=Get_bit(DIO_u8_PINC,Copy_u8_Pin_ID);
    12d2:	e3 e3       	ldi	r30, 0x33	; 51
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	88 2f       	mov	r24, r24
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	a9 01       	movw	r20, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <DIO_u8Get_Pin_value+0xd8>
    12e6:	55 95       	asr	r21
    12e8:	47 95       	ror	r20
    12ea:	8a 95       	dec	r24
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <DIO_u8Get_Pin_value+0xd4>
    12ee:	ca 01       	movw	r24, r20
    12f0:	81 70       	andi	r24, 0x01	; 1
    12f2:	ec 81       	ldd	r30, Y+4	; 0x04
    12f4:	fd 81       	ldd	r31, Y+5	; 0x05
    12f6:	80 83       	st	Z, r24
    12f8:	19 c0       	rjmp	.+50     	; 0x132c <DIO_u8Get_Pin_value+0x11a>
				break;
			case GROUP_D:
				*Copy_u8_val=Get_bit(DIO_u8_PIND,Copy_u8_Pin_ID);
    12fa:	e0 e3       	ldi	r30, 0x30	; 48
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	88 2f       	mov	r24, r24
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	a9 01       	movw	r20, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <DIO_u8Get_Pin_value+0x100>
    130e:	55 95       	asr	r21
    1310:	47 95       	ror	r20
    1312:	8a 95       	dec	r24
    1314:	e2 f7       	brpl	.-8      	; 0x130e <DIO_u8Get_Pin_value+0xfc>
    1316:	ca 01       	movw	r24, r20
    1318:	81 70       	andi	r24, 0x01	; 1
    131a:	ec 81       	ldd	r30, Y+4	; 0x04
    131c:	fd 81       	ldd	r31, Y+5	; 0x05
    131e:	80 83       	st	Z, r24
    1320:	05 c0       	rjmp	.+10     	; 0x132c <DIO_u8Get_Pin_value+0x11a>
				break;
			}

		}else{
			loc_u8Error_State=DIO_u8PIN_ID_ERR;
    1322:	82 e0       	ldi	r24, 0x02	; 2
    1324:	89 83       	std	Y+1, r24	; 0x01
    1326:	02 c0       	rjmp	.+4      	; 0x132c <DIO_u8Get_Pin_value+0x11a>
		}
	}else{
		loc_u8Error_State=DIO_u8PORT_ID_ERR;
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	89 83       	std	Y+1, r24	; 0x01
	}
	return loc_u8Error_State;
    132c:	89 81       	ldd	r24, Y+1	; 0x01
}
    132e:	27 96       	adiw	r28, 0x07	; 7
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	f8 94       	cli
    1334:	de bf       	out	0x3e, r29	; 62
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	cd bf       	out	0x3d, r28	; 61
    133a:	cf 91       	pop	r28
    133c:	df 91       	pop	r29
    133e:	08 95       	ret

00001340 <DIO_u8Get_PORT_value>:
u8 DIO_u8Get_PORT_value(u8 Copy_u8_Port_ID,u8 *Copy_u8_PORT_val)
{
    1340:	df 93       	push	r29
    1342:	cf 93       	push	r28
    1344:	00 d0       	rcall	.+0      	; 0x1346 <DIO_u8Get_PORT_value+0x6>
    1346:	00 d0       	rcall	.+0      	; 0x1348 <DIO_u8Get_PORT_value+0x8>
    1348:	00 d0       	rcall	.+0      	; 0x134a <DIO_u8Get_PORT_value+0xa>
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	8a 83       	std	Y+2, r24	; 0x02
    1350:	7c 83       	std	Y+4, r23	; 0x04
    1352:	6b 83       	std	Y+3, r22	; 0x03
	u8 loc_u8Error_State=DIO_u8PORT_INIT_ERR;
    1354:	19 82       	std	Y+1, r1	; 0x01
		if((Copy_u8_Port_ID>=DIO_MIN_u8_PORT_ID)&&(Copy_u8_Port_ID<=DIO_MAX_u8_PORT_ID))
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	84 30       	cpi	r24, 0x04	; 4
    135a:	d8 f5       	brcc	.+118    	; 0x13d2 <DIO_u8Get_PORT_value+0x92>
		{

				switch(Copy_u8_Port_ID)
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	3e 83       	std	Y+6, r19	; 0x06
    1364:	2d 83       	std	Y+5, r18	; 0x05
    1366:	8d 81       	ldd	r24, Y+5	; 0x05
    1368:	9e 81       	ldd	r25, Y+6	; 0x06
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	91 05       	cpc	r25, r1
    136e:	e1 f0       	breq	.+56     	; 0x13a8 <DIO_u8Get_PORT_value+0x68>
    1370:	2d 81       	ldd	r18, Y+5	; 0x05
    1372:	3e 81       	ldd	r19, Y+6	; 0x06
    1374:	22 30       	cpi	r18, 0x02	; 2
    1376:	31 05       	cpc	r19, r1
    1378:	2c f4       	brge	.+10     	; 0x1384 <DIO_u8Get_PORT_value+0x44>
    137a:	8d 81       	ldd	r24, Y+5	; 0x05
    137c:	9e 81       	ldd	r25, Y+6	; 0x06
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	61 f0       	breq	.+24     	; 0x139a <DIO_u8Get_PORT_value+0x5a>
    1382:	29 c0       	rjmp	.+82     	; 0x13d6 <DIO_u8Get_PORT_value+0x96>
    1384:	2d 81       	ldd	r18, Y+5	; 0x05
    1386:	3e 81       	ldd	r19, Y+6	; 0x06
    1388:	22 30       	cpi	r18, 0x02	; 2
    138a:	31 05       	cpc	r19, r1
    138c:	a1 f0       	breq	.+40     	; 0x13b6 <DIO_u8Get_PORT_value+0x76>
    138e:	8d 81       	ldd	r24, Y+5	; 0x05
    1390:	9e 81       	ldd	r25, Y+6	; 0x06
    1392:	83 30       	cpi	r24, 0x03	; 3
    1394:	91 05       	cpc	r25, r1
    1396:	b1 f0       	breq	.+44     	; 0x13c4 <DIO_u8Get_PORT_value+0x84>
    1398:	1e c0       	rjmp	.+60     	; 0x13d6 <DIO_u8Get_PORT_value+0x96>
				{
				case GROUP_A:
					*Copy_u8_PORT_val=DIO_u8_PINA;
    139a:	e9 e3       	ldi	r30, 0x39	; 57
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	eb 81       	ldd	r30, Y+3	; 0x03
    13a2:	fc 81       	ldd	r31, Y+4	; 0x04
    13a4:	80 83       	st	Z, r24
    13a6:	17 c0       	rjmp	.+46     	; 0x13d6 <DIO_u8Get_PORT_value+0x96>
					break;
				case GROUP_B:
					*Copy_u8_PORT_val=DIO_u8_PINB;
    13a8:	e6 e3       	ldi	r30, 0x36	; 54
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	eb 81       	ldd	r30, Y+3	; 0x03
    13b0:	fc 81       	ldd	r31, Y+4	; 0x04
    13b2:	80 83       	st	Z, r24
    13b4:	10 c0       	rjmp	.+32     	; 0x13d6 <DIO_u8Get_PORT_value+0x96>
					break;
				case GROUP_C:
					*Copy_u8_PORT_val=DIO_u8_PINC;
    13b6:	e3 e3       	ldi	r30, 0x33	; 51
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	eb 81       	ldd	r30, Y+3	; 0x03
    13be:	fc 81       	ldd	r31, Y+4	; 0x04
    13c0:	80 83       	st	Z, r24
    13c2:	09 c0       	rjmp	.+18     	; 0x13d6 <DIO_u8Get_PORT_value+0x96>
					break;
				case GROUP_D:
					*Copy_u8_PORT_val=DIO_u8_PIND;
    13c4:	e0 e3       	ldi	r30, 0x30	; 48
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	eb 81       	ldd	r30, Y+3	; 0x03
    13cc:	fc 81       	ldd	r31, Y+4	; 0x04
    13ce:	80 83       	st	Z, r24
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <DIO_u8Get_PORT_value+0x96>
					break;
				}


		}else{
			loc_u8Error_State=DIO_u8PORT_ID_ERR;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	89 83       	std	Y+1, r24	; 0x01
		}
		return loc_u8Error_State;
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    13d8:	26 96       	adiw	r28, 0x06	; 6
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	f8 94       	cli
    13de:	de bf       	out	0x3e, r29	; 62
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	cd bf       	out	0x3d, r28	; 61
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	08 95       	ret

000013ea <LCD_void_inti>:
#include "LCD_config.h"
#include "LCD_interface.h"
#include <avr/delay.h>

void LCD_void_inti()
{
    13ea:	0f 93       	push	r16
    13ec:	1f 93       	push	r17
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	ca 55       	subi	r28, 0x5A	; 90
    13f8:	d0 40       	sbci	r29, 0x00	; 0
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	f8 94       	cli
    13fe:	de bf       	out	0x3e, r29	; 62
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	cd bf       	out	0x3d, r28	; 61
	DIO_u8Set_PORT_direction(LCD_u8_ctrl_PORT,255);
    1404:	82 e0       	ldi	r24, 0x02	; 2
    1406:	6f ef       	ldi	r22, 0xFF	; 255
    1408:	0e 94 be 08 	call	0x117c	; 0x117c <DIO_u8Set_PORT_direction>
	DIO_u8Set_PORT_direction(LCD_u8_DATA_PORT,255);
    140c:	83 e0       	ldi	r24, 0x03	; 3
    140e:	6f ef       	ldi	r22, 0xFF	; 255
    1410:	0e 94 be 08 	call	0x117c	; 0x117c <DIO_u8Set_PORT_direction>
    1414:	fe 01       	movw	r30, r28
    1416:	e9 5a       	subi	r30, 0xA9	; 169
    1418:	ff 4f       	sbci	r31, 0xFF	; 255
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	a0 e2       	ldi	r26, 0x20	; 32
    1420:	b2 e4       	ldi	r27, 0x42	; 66
    1422:	80 83       	st	Z, r24
    1424:	91 83       	std	Z+1, r25	; 0x01
    1426:	a2 83       	std	Z+2, r26	; 0x02
    1428:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    142a:	8e 01       	movw	r16, r28
    142c:	0d 5a       	subi	r16, 0xAD	; 173
    142e:	1f 4f       	sbci	r17, 0xFF	; 255
    1430:	fe 01       	movw	r30, r28
    1432:	e9 5a       	subi	r30, 0xA9	; 169
    1434:	ff 4f       	sbci	r31, 0xFF	; 255
    1436:	60 81       	ld	r22, Z
    1438:	71 81       	ldd	r23, Z+1	; 0x01
    143a:	82 81       	ldd	r24, Z+2	; 0x02
    143c:	93 81       	ldd	r25, Z+3	; 0x03
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	4a ef       	ldi	r20, 0xFA	; 250
    1444:	54 e4       	ldi	r21, 0x44	; 68
    1446:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    144a:	dc 01       	movw	r26, r24
    144c:	cb 01       	movw	r24, r22
    144e:	f8 01       	movw	r30, r16
    1450:	80 83       	st	Z, r24
    1452:	91 83       	std	Z+1, r25	; 0x01
    1454:	a2 83       	std	Z+2, r26	; 0x02
    1456:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1458:	fe 01       	movw	r30, r28
    145a:	ed 5a       	subi	r30, 0xAD	; 173
    145c:	ff 4f       	sbci	r31, 0xFF	; 255
    145e:	60 81       	ld	r22, Z
    1460:	71 81       	ldd	r23, Z+1	; 0x01
    1462:	82 81       	ldd	r24, Z+2	; 0x02
    1464:	93 81       	ldd	r25, Z+3	; 0x03
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	40 e8       	ldi	r20, 0x80	; 128
    146c:	5f e3       	ldi	r21, 0x3F	; 63
    146e:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1472:	88 23       	and	r24, r24
    1474:	44 f4       	brge	.+16     	; 0x1486 <LCD_void_inti+0x9c>
		__ticks = 1;
    1476:	fe 01       	movw	r30, r28
    1478:	ef 5a       	subi	r30, 0xAF	; 175
    147a:	ff 4f       	sbci	r31, 0xFF	; 255
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	91 83       	std	Z+1, r25	; 0x01
    1482:	80 83       	st	Z, r24
    1484:	64 c0       	rjmp	.+200    	; 0x154e <LCD_void_inti+0x164>
	else if (__tmp > 65535)
    1486:	fe 01       	movw	r30, r28
    1488:	ed 5a       	subi	r30, 0xAD	; 173
    148a:	ff 4f       	sbci	r31, 0xFF	; 255
    148c:	60 81       	ld	r22, Z
    148e:	71 81       	ldd	r23, Z+1	; 0x01
    1490:	82 81       	ldd	r24, Z+2	; 0x02
    1492:	93 81       	ldd	r25, Z+3	; 0x03
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	3f ef       	ldi	r19, 0xFF	; 255
    1498:	4f e7       	ldi	r20, 0x7F	; 127
    149a:	57 e4       	ldi	r21, 0x47	; 71
    149c:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    14a0:	18 16       	cp	r1, r24
    14a2:	0c f0       	brlt	.+2      	; 0x14a6 <LCD_void_inti+0xbc>
    14a4:	43 c0       	rjmp	.+134    	; 0x152c <LCD_void_inti+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a6:	fe 01       	movw	r30, r28
    14a8:	e9 5a       	subi	r30, 0xA9	; 169
    14aa:	ff 4f       	sbci	r31, 0xFF	; 255
    14ac:	60 81       	ld	r22, Z
    14ae:	71 81       	ldd	r23, Z+1	; 0x01
    14b0:	82 81       	ldd	r24, Z+2	; 0x02
    14b2:	93 81       	ldd	r25, Z+3	; 0x03
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	40 e2       	ldi	r20, 0x20	; 32
    14ba:	51 e4       	ldi	r21, 0x41	; 65
    14bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	8e 01       	movw	r16, r28
    14c6:	0f 5a       	subi	r16, 0xAF	; 175
    14c8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ca:	bc 01       	movw	r22, r24
    14cc:	cd 01       	movw	r24, r26
    14ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	f8 01       	movw	r30, r16
    14d8:	91 83       	std	Z+1, r25	; 0x01
    14da:	80 83       	st	Z, r24
    14dc:	1f c0       	rjmp	.+62     	; 0x151c <LCD_void_inti+0x132>
    14de:	fe 01       	movw	r30, r28
    14e0:	e1 5b       	subi	r30, 0xB1	; 177
    14e2:	ff 4f       	sbci	r31, 0xFF	; 255
    14e4:	88 ec       	ldi	r24, 0xC8	; 200
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	91 83       	std	Z+1, r25	; 0x01
    14ea:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14ec:	fe 01       	movw	r30, r28
    14ee:	e1 5b       	subi	r30, 0xB1	; 177
    14f0:	ff 4f       	sbci	r31, 0xFF	; 255
    14f2:	80 81       	ld	r24, Z
    14f4:	91 81       	ldd	r25, Z+1	; 0x01
    14f6:	01 97       	sbiw	r24, 0x01	; 1
    14f8:	f1 f7       	brne	.-4      	; 0x14f6 <LCD_void_inti+0x10c>
    14fa:	fe 01       	movw	r30, r28
    14fc:	e1 5b       	subi	r30, 0xB1	; 177
    14fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1500:	91 83       	std	Z+1, r25	; 0x01
    1502:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1504:	de 01       	movw	r26, r28
    1506:	af 5a       	subi	r26, 0xAF	; 175
    1508:	bf 4f       	sbci	r27, 0xFF	; 255
    150a:	fe 01       	movw	r30, r28
    150c:	ef 5a       	subi	r30, 0xAF	; 175
    150e:	ff 4f       	sbci	r31, 0xFF	; 255
    1510:	80 81       	ld	r24, Z
    1512:	91 81       	ldd	r25, Z+1	; 0x01
    1514:	01 97       	sbiw	r24, 0x01	; 1
    1516:	11 96       	adiw	r26, 0x01	; 1
    1518:	9c 93       	st	X, r25
    151a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    151c:	fe 01       	movw	r30, r28
    151e:	ef 5a       	subi	r30, 0xAF	; 175
    1520:	ff 4f       	sbci	r31, 0xFF	; 255
    1522:	80 81       	ld	r24, Z
    1524:	91 81       	ldd	r25, Z+1	; 0x01
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	d1 f6       	brne	.-76     	; 0x14de <LCD_void_inti+0xf4>
    152a:	27 c0       	rjmp	.+78     	; 0x157a <LCD_void_inti+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    152c:	8e 01       	movw	r16, r28
    152e:	0f 5a       	subi	r16, 0xAF	; 175
    1530:	1f 4f       	sbci	r17, 0xFF	; 255
    1532:	fe 01       	movw	r30, r28
    1534:	ed 5a       	subi	r30, 0xAD	; 173
    1536:	ff 4f       	sbci	r31, 0xFF	; 255
    1538:	60 81       	ld	r22, Z
    153a:	71 81       	ldd	r23, Z+1	; 0x01
    153c:	82 81       	ldd	r24, Z+2	; 0x02
    153e:	93 81       	ldd	r25, Z+3	; 0x03
    1540:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	f8 01       	movw	r30, r16
    154a:	91 83       	std	Z+1, r25	; 0x01
    154c:	80 83       	st	Z, r24
    154e:	de 01       	movw	r26, r28
    1550:	a3 5b       	subi	r26, 0xB3	; 179
    1552:	bf 4f       	sbci	r27, 0xFF	; 255
    1554:	fe 01       	movw	r30, r28
    1556:	ef 5a       	subi	r30, 0xAF	; 175
    1558:	ff 4f       	sbci	r31, 0xFF	; 255
    155a:	80 81       	ld	r24, Z
    155c:	91 81       	ldd	r25, Z+1	; 0x01
    155e:	8d 93       	st	X+, r24
    1560:	9c 93       	st	X, r25
    1562:	fe 01       	movw	r30, r28
    1564:	e3 5b       	subi	r30, 0xB3	; 179
    1566:	ff 4f       	sbci	r31, 0xFF	; 255
    1568:	80 81       	ld	r24, Z
    156a:	91 81       	ldd	r25, Z+1	; 0x01
    156c:	01 97       	sbiw	r24, 0x01	; 1
    156e:	f1 f7       	brne	.-4      	; 0x156c <LCD_void_inti+0x182>
    1570:	fe 01       	movw	r30, r28
    1572:	e3 5b       	subi	r30, 0xB3	; 179
    1574:	ff 4f       	sbci	r31, 0xFF	; 255
    1576:	91 83       	std	Z+1, r25	; 0x01
    1578:	80 83       	st	Z, r24
	_delay_ms(40);
	LCD_void_wirte_command(0b00111000);//Function set (8 bit mode , 2 lines , 5x7 format).
    157a:	88 e3       	ldi	r24, 0x38	; 56
    157c:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <LCD_void_wirte_command>
    1580:	fe 01       	movw	r30, r28
    1582:	e7 5b       	subi	r30, 0xB7	; 183
    1584:	ff 4f       	sbci	r31, 0xFF	; 255
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	a8 e4       	ldi	r26, 0x48	; 72
    158c:	b2 e4       	ldi	r27, 0x42	; 66
    158e:	80 83       	st	Z, r24
    1590:	91 83       	std	Z+1, r25	; 0x01
    1592:	a2 83       	std	Z+2, r26	; 0x02
    1594:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1596:	8e 01       	movw	r16, r28
    1598:	0b 5b       	subi	r16, 0xBB	; 187
    159a:	1f 4f       	sbci	r17, 0xFF	; 255
    159c:	fe 01       	movw	r30, r28
    159e:	e7 5b       	subi	r30, 0xB7	; 183
    15a0:	ff 4f       	sbci	r31, 0xFF	; 255
    15a2:	60 81       	ld	r22, Z
    15a4:	71 81       	ldd	r23, Z+1	; 0x01
    15a6:	82 81       	ldd	r24, Z+2	; 0x02
    15a8:	93 81       	ldd	r25, Z+3	; 0x03
    15aa:	2b ea       	ldi	r18, 0xAB	; 171
    15ac:	3a ea       	ldi	r19, 0xAA	; 170
    15ae:	4a e2       	ldi	r20, 0x2A	; 42
    15b0:	50 e4       	ldi	r21, 0x40	; 64
    15b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	f8 01       	movw	r30, r16
    15bc:	80 83       	st	Z, r24
    15be:	91 83       	std	Z+1, r25	; 0x01
    15c0:	a2 83       	std	Z+2, r26	; 0x02
    15c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15c4:	fe 01       	movw	r30, r28
    15c6:	eb 5b       	subi	r30, 0xBB	; 187
    15c8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ca:	60 81       	ld	r22, Z
    15cc:	71 81       	ldd	r23, Z+1	; 0x01
    15ce:	82 81       	ldd	r24, Z+2	; 0x02
    15d0:	93 81       	ldd	r25, Z+3	; 0x03
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	40 e8       	ldi	r20, 0x80	; 128
    15d8:	5f e3       	ldi	r21, 0x3F	; 63
    15da:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    15de:	88 23       	and	r24, r24
    15e0:	34 f4       	brge	.+12     	; 0x15ee <LCD_void_inti+0x204>
		__ticks = 1;
    15e2:	fe 01       	movw	r30, r28
    15e4:	ec 5b       	subi	r30, 0xBC	; 188
    15e6:	ff 4f       	sbci	r31, 0xFF	; 255
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	80 83       	st	Z, r24
    15ec:	a7 c0       	rjmp	.+334    	; 0x173c <LCD_void_inti+0x352>
	else if (__tmp > 255)
    15ee:	fe 01       	movw	r30, r28
    15f0:	eb 5b       	subi	r30, 0xBB	; 187
    15f2:	ff 4f       	sbci	r31, 0xFF	; 255
    15f4:	60 81       	ld	r22, Z
    15f6:	71 81       	ldd	r23, Z+1	; 0x01
    15f8:	82 81       	ldd	r24, Z+2	; 0x02
    15fa:	93 81       	ldd	r25, Z+3	; 0x03
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	4f e7       	ldi	r20, 0x7F	; 127
    1602:	53 e4       	ldi	r21, 0x43	; 67
    1604:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1608:	18 16       	cp	r1, r24
    160a:	0c f0       	brlt	.+2      	; 0x160e <LCD_void_inti+0x224>
    160c:	87 c0       	rjmp	.+270    	; 0x171c <LCD_void_inti+0x332>
	{
		_delay_ms(__us / 1000.0);
    160e:	fe 01       	movw	r30, r28
    1610:	e7 5b       	subi	r30, 0xB7	; 183
    1612:	ff 4f       	sbci	r31, 0xFF	; 255
    1614:	60 81       	ld	r22, Z
    1616:	71 81       	ldd	r23, Z+1	; 0x01
    1618:	82 81       	ldd	r24, Z+2	; 0x02
    161a:	93 81       	ldd	r25, Z+3	; 0x03
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	4a e7       	ldi	r20, 0x7A	; 122
    1622:	54 e4       	ldi	r21, 0x44	; 68
    1624:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	fe 01       	movw	r30, r28
    162e:	e0 5c       	subi	r30, 0xC0	; 192
    1630:	ff 4f       	sbci	r31, 0xFF	; 255
    1632:	80 83       	st	Z, r24
    1634:	91 83       	std	Z+1, r25	; 0x01
    1636:	a2 83       	std	Z+2, r26	; 0x02
    1638:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    163a:	fe 01       	movw	r30, r28
    163c:	e0 5c       	subi	r30, 0xC0	; 192
    163e:	ff 4f       	sbci	r31, 0xFF	; 255
    1640:	60 81       	ld	r22, Z
    1642:	71 81       	ldd	r23, Z+1	; 0x01
    1644:	82 81       	ldd	r24, Z+2	; 0x02
    1646:	93 81       	ldd	r25, Z+3	; 0x03
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	4a ef       	ldi	r20, 0xFA	; 250
    164e:	54 e4       	ldi	r21, 0x44	; 68
    1650:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	8c af       	std	Y+60, r24	; 0x3c
    165a:	9d af       	std	Y+61, r25	; 0x3d
    165c:	ae af       	std	Y+62, r26	; 0x3e
    165e:	bf af       	std	Y+63, r27	; 0x3f
	if (__tmp < 1.0)
    1660:	6c ad       	ldd	r22, Y+60	; 0x3c
    1662:	7d ad       	ldd	r23, Y+61	; 0x3d
    1664:	8e ad       	ldd	r24, Y+62	; 0x3e
    1666:	9f ad       	ldd	r25, Y+63	; 0x3f
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	40 e8       	ldi	r20, 0x80	; 128
    166e:	5f e3       	ldi	r21, 0x3F	; 63
    1670:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1674:	88 23       	and	r24, r24
    1676:	2c f4       	brge	.+10     	; 0x1682 <LCD_void_inti+0x298>
		__ticks = 1;
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	9b af       	std	Y+59, r25	; 0x3b
    167e:	8a af       	std	Y+58, r24	; 0x3a
    1680:	42 c0       	rjmp	.+132    	; 0x1706 <LCD_void_inti+0x31c>
	else if (__tmp > 65535)
    1682:	6c ad       	ldd	r22, Y+60	; 0x3c
    1684:	7d ad       	ldd	r23, Y+61	; 0x3d
    1686:	8e ad       	ldd	r24, Y+62	; 0x3e
    1688:	9f ad       	ldd	r25, Y+63	; 0x3f
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	3f ef       	ldi	r19, 0xFF	; 255
    168e:	4f e7       	ldi	r20, 0x7F	; 127
    1690:	57 e4       	ldi	r21, 0x47	; 71
    1692:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1696:	18 16       	cp	r1, r24
    1698:	64 f5       	brge	.+88     	; 0x16f2 <LCD_void_inti+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    169a:	fe 01       	movw	r30, r28
    169c:	e0 5c       	subi	r30, 0xC0	; 192
    169e:	ff 4f       	sbci	r31, 0xFF	; 255
    16a0:	60 81       	ld	r22, Z
    16a2:	71 81       	ldd	r23, Z+1	; 0x01
    16a4:	82 81       	ldd	r24, Z+2	; 0x02
    16a6:	93 81       	ldd	r25, Z+3	; 0x03
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	40 e2       	ldi	r20, 0x20	; 32
    16ae:	51 e4       	ldi	r21, 0x41	; 65
    16b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16b4:	dc 01       	movw	r26, r24
    16b6:	cb 01       	movw	r24, r22
    16b8:	bc 01       	movw	r22, r24
    16ba:	cd 01       	movw	r24, r26
    16bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	9b af       	std	Y+59, r25	; 0x3b
    16c6:	8a af       	std	Y+58, r24	; 0x3a
    16c8:	0f c0       	rjmp	.+30     	; 0x16e8 <LCD_void_inti+0x2fe>
    16ca:	88 ec       	ldi	r24, 0xC8	; 200
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	99 af       	std	Y+57, r25	; 0x39
    16d0:	88 af       	std	Y+56, r24	; 0x38
    16d2:	88 ad       	ldd	r24, Y+56	; 0x38
    16d4:	99 ad       	ldd	r25, Y+57	; 0x39
    16d6:	01 97       	sbiw	r24, 0x01	; 1
    16d8:	f1 f7       	brne	.-4      	; 0x16d6 <LCD_void_inti+0x2ec>
    16da:	99 af       	std	Y+57, r25	; 0x39
    16dc:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16de:	8a ad       	ldd	r24, Y+58	; 0x3a
    16e0:	9b ad       	ldd	r25, Y+59	; 0x3b
    16e2:	01 97       	sbiw	r24, 0x01	; 1
    16e4:	9b af       	std	Y+59, r25	; 0x3b
    16e6:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e8:	8a ad       	ldd	r24, Y+58	; 0x3a
    16ea:	9b ad       	ldd	r25, Y+59	; 0x3b
    16ec:	00 97       	sbiw	r24, 0x00	; 0
    16ee:	69 f7       	brne	.-38     	; 0x16ca <LCD_void_inti+0x2e0>
    16f0:	2e c0       	rjmp	.+92     	; 0x174e <LCD_void_inti+0x364>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f2:	6c ad       	ldd	r22, Y+60	; 0x3c
    16f4:	7d ad       	ldd	r23, Y+61	; 0x3d
    16f6:	8e ad       	ldd	r24, Y+62	; 0x3e
    16f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    16fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	9b af       	std	Y+59, r25	; 0x3b
    1704:	8a af       	std	Y+58, r24	; 0x3a
    1706:	8a ad       	ldd	r24, Y+58	; 0x3a
    1708:	9b ad       	ldd	r25, Y+59	; 0x3b
    170a:	9f ab       	std	Y+55, r25	; 0x37
    170c:	8e ab       	std	Y+54, r24	; 0x36
    170e:	8e a9       	ldd	r24, Y+54	; 0x36
    1710:	9f a9       	ldd	r25, Y+55	; 0x37
    1712:	01 97       	sbiw	r24, 0x01	; 1
    1714:	f1 f7       	brne	.-4      	; 0x1712 <LCD_void_inti+0x328>
    1716:	9f ab       	std	Y+55, r25	; 0x37
    1718:	8e ab       	std	Y+54, r24	; 0x36
    171a:	19 c0       	rjmp	.+50     	; 0x174e <LCD_void_inti+0x364>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    171c:	8e 01       	movw	r16, r28
    171e:	0c 5b       	subi	r16, 0xBC	; 188
    1720:	1f 4f       	sbci	r17, 0xFF	; 255
    1722:	fe 01       	movw	r30, r28
    1724:	eb 5b       	subi	r30, 0xBB	; 187
    1726:	ff 4f       	sbci	r31, 0xFF	; 255
    1728:	60 81       	ld	r22, Z
    172a:	71 81       	ldd	r23, Z+1	; 0x01
    172c:	82 81       	ldd	r24, Z+2	; 0x02
    172e:	93 81       	ldd	r25, Z+3	; 0x03
    1730:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	f8 01       	movw	r30, r16
    173a:	80 83       	st	Z, r24
    173c:	fe 01       	movw	r30, r28
    173e:	ec 5b       	subi	r30, 0xBC	; 188
    1740:	ff 4f       	sbci	r31, 0xFF	; 255
    1742:	80 81       	ld	r24, Z
    1744:	8d ab       	std	Y+53, r24	; 0x35
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1746:	8d a9       	ldd	r24, Y+53	; 0x35
    1748:	8a 95       	dec	r24
    174a:	f1 f7       	brne	.-4      	; 0x1748 <LCD_void_inti+0x35e>
    174c:	8d ab       	std	Y+53, r24	; 0x35
	_delay_us(50);
	LCD_void_wirte_command(0b00001100);//Display ON/OFF control. (Display ON , cursor ON , blinking off)
    174e:	8c e0       	ldi	r24, 0x0C	; 12
    1750:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <LCD_void_wirte_command>
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	a8 e4       	ldi	r26, 0x48	; 72
    175a:	b2 e4       	ldi	r27, 0x42	; 66
    175c:	89 ab       	std	Y+49, r24	; 0x31
    175e:	9a ab       	std	Y+50, r25	; 0x32
    1760:	ab ab       	std	Y+51, r26	; 0x33
    1762:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1764:	69 a9       	ldd	r22, Y+49	; 0x31
    1766:	7a a9       	ldd	r23, Y+50	; 0x32
    1768:	8b a9       	ldd	r24, Y+51	; 0x33
    176a:	9c a9       	ldd	r25, Y+52	; 0x34
    176c:	2b ea       	ldi	r18, 0xAB	; 171
    176e:	3a ea       	ldi	r19, 0xAA	; 170
    1770:	4a e2       	ldi	r20, 0x2A	; 42
    1772:	50 e4       	ldi	r21, 0x40	; 64
    1774:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	8d a7       	std	Y+45, r24	; 0x2d
    177e:	9e a7       	std	Y+46, r25	; 0x2e
    1780:	af a7       	std	Y+47, r26	; 0x2f
    1782:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    1784:	6d a5       	ldd	r22, Y+45	; 0x2d
    1786:	7e a5       	ldd	r23, Y+46	; 0x2e
    1788:	8f a5       	ldd	r24, Y+47	; 0x2f
    178a:	98 a9       	ldd	r25, Y+48	; 0x30
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	40 e8       	ldi	r20, 0x80	; 128
    1792:	5f e3       	ldi	r21, 0x3F	; 63
    1794:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1798:	88 23       	and	r24, r24
    179a:	1c f4       	brge	.+6      	; 0x17a2 <LCD_void_inti+0x3b8>
		__ticks = 1;
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	8c a7       	std	Y+44, r24	; 0x2c
    17a0:	91 c0       	rjmp	.+290    	; 0x18c4 <LCD_void_inti+0x4da>
	else if (__tmp > 255)
    17a2:	6d a5       	ldd	r22, Y+45	; 0x2d
    17a4:	7e a5       	ldd	r23, Y+46	; 0x2e
    17a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    17a8:	98 a9       	ldd	r25, Y+48	; 0x30
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	4f e7       	ldi	r20, 0x7F	; 127
    17b0:	53 e4       	ldi	r21, 0x43	; 67
    17b2:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    17b6:	18 16       	cp	r1, r24
    17b8:	0c f0       	brlt	.+2      	; 0x17bc <LCD_void_inti+0x3d2>
    17ba:	7b c0       	rjmp	.+246    	; 0x18b2 <LCD_void_inti+0x4c8>
	{
		_delay_ms(__us / 1000.0);
    17bc:	69 a9       	ldd	r22, Y+49	; 0x31
    17be:	7a a9       	ldd	r23, Y+50	; 0x32
    17c0:	8b a9       	ldd	r24, Y+51	; 0x33
    17c2:	9c a9       	ldd	r25, Y+52	; 0x34
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	4a e7       	ldi	r20, 0x7A	; 122
    17ca:	54 e4       	ldi	r21, 0x44	; 68
    17cc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	88 a7       	std	Y+40, r24	; 0x28
    17d6:	99 a7       	std	Y+41, r25	; 0x29
    17d8:	aa a7       	std	Y+42, r26	; 0x2a
    17da:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17dc:	68 a5       	ldd	r22, Y+40	; 0x28
    17de:	79 a5       	ldd	r23, Y+41	; 0x29
    17e0:	8a a5       	ldd	r24, Y+42	; 0x2a
    17e2:	9b a5       	ldd	r25, Y+43	; 0x2b
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	4a ef       	ldi	r20, 0xFA	; 250
    17ea:	54 e4       	ldi	r21, 0x44	; 68
    17ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	8c a3       	std	Y+36, r24	; 0x24
    17f6:	9d a3       	std	Y+37, r25	; 0x25
    17f8:	ae a3       	std	Y+38, r26	; 0x26
    17fa:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    17fc:	6c a1       	ldd	r22, Y+36	; 0x24
    17fe:	7d a1       	ldd	r23, Y+37	; 0x25
    1800:	8e a1       	ldd	r24, Y+38	; 0x26
    1802:	9f a1       	ldd	r25, Y+39	; 0x27
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	40 e8       	ldi	r20, 0x80	; 128
    180a:	5f e3       	ldi	r21, 0x3F	; 63
    180c:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1810:	88 23       	and	r24, r24
    1812:	2c f4       	brge	.+10     	; 0x181e <LCD_void_inti+0x434>
		__ticks = 1;
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	9b a3       	std	Y+35, r25	; 0x23
    181a:	8a a3       	std	Y+34, r24	; 0x22
    181c:	3f c0       	rjmp	.+126    	; 0x189c <LCD_void_inti+0x4b2>
	else if (__tmp > 65535)
    181e:	6c a1       	ldd	r22, Y+36	; 0x24
    1820:	7d a1       	ldd	r23, Y+37	; 0x25
    1822:	8e a1       	ldd	r24, Y+38	; 0x26
    1824:	9f a1       	ldd	r25, Y+39	; 0x27
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	3f ef       	ldi	r19, 0xFF	; 255
    182a:	4f e7       	ldi	r20, 0x7F	; 127
    182c:	57 e4       	ldi	r21, 0x47	; 71
    182e:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1832:	18 16       	cp	r1, r24
    1834:	4c f5       	brge	.+82     	; 0x1888 <LCD_void_inti+0x49e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1836:	68 a5       	ldd	r22, Y+40	; 0x28
    1838:	79 a5       	ldd	r23, Y+41	; 0x29
    183a:	8a a5       	ldd	r24, Y+42	; 0x2a
    183c:	9b a5       	ldd	r25, Y+43	; 0x2b
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	40 e2       	ldi	r20, 0x20	; 32
    1844:	51 e4       	ldi	r21, 0x41	; 65
    1846:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	bc 01       	movw	r22, r24
    1850:	cd 01       	movw	r24, r26
    1852:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	9b a3       	std	Y+35, r25	; 0x23
    185c:	8a a3       	std	Y+34, r24	; 0x22
    185e:	0f c0       	rjmp	.+30     	; 0x187e <LCD_void_inti+0x494>
    1860:	88 ec       	ldi	r24, 0xC8	; 200
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	99 a3       	std	Y+33, r25	; 0x21
    1866:	88 a3       	std	Y+32, r24	; 0x20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1868:	88 a1       	ldd	r24, Y+32	; 0x20
    186a:	99 a1       	ldd	r25, Y+33	; 0x21
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	f1 f7       	brne	.-4      	; 0x186c <LCD_void_inti+0x482>
    1870:	99 a3       	std	Y+33, r25	; 0x21
    1872:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1874:	8a a1       	ldd	r24, Y+34	; 0x22
    1876:	9b a1       	ldd	r25, Y+35	; 0x23
    1878:	01 97       	sbiw	r24, 0x01	; 1
    187a:	9b a3       	std	Y+35, r25	; 0x23
    187c:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    187e:	8a a1       	ldd	r24, Y+34	; 0x22
    1880:	9b a1       	ldd	r25, Y+35	; 0x23
    1882:	00 97       	sbiw	r24, 0x00	; 0
    1884:	69 f7       	brne	.-38     	; 0x1860 <LCD_void_inti+0x476>
    1886:	24 c0       	rjmp	.+72     	; 0x18d0 <LCD_void_inti+0x4e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1888:	6c a1       	ldd	r22, Y+36	; 0x24
    188a:	7d a1       	ldd	r23, Y+37	; 0x25
    188c:	8e a1       	ldd	r24, Y+38	; 0x26
    188e:	9f a1       	ldd	r25, Y+39	; 0x27
    1890:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	9b a3       	std	Y+35, r25	; 0x23
    189a:	8a a3       	std	Y+34, r24	; 0x22
    189c:	8a a1       	ldd	r24, Y+34	; 0x22
    189e:	9b a1       	ldd	r25, Y+35	; 0x23
    18a0:	9f 8f       	std	Y+31, r25	; 0x1f
    18a2:	8e 8f       	std	Y+30, r24	; 0x1e
    18a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18a6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    18a8:	01 97       	sbiw	r24, 0x01	; 1
    18aa:	f1 f7       	brne	.-4      	; 0x18a8 <LCD_void_inti+0x4be>
    18ac:	9f 8f       	std	Y+31, r25	; 0x1f
    18ae:	8e 8f       	std	Y+30, r24	; 0x1e
    18b0:	0f c0       	rjmp	.+30     	; 0x18d0 <LCD_void_inti+0x4e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18b2:	6d a5       	ldd	r22, Y+45	; 0x2d
    18b4:	7e a5       	ldd	r23, Y+46	; 0x2e
    18b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    18b8:	98 a9       	ldd	r25, Y+48	; 0x30
    18ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	8c a7       	std	Y+44, r24	; 0x2c
    18c4:	8c a5       	ldd	r24, Y+44	; 0x2c
    18c6:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18ca:	8a 95       	dec	r24
    18cc:	f1 f7       	brne	.-4      	; 0x18ca <LCD_void_inti+0x4e0>
    18ce:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_us(50);
	LCD_void_wirte_command(0b00000001);//display clear
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <LCD_void_wirte_command>
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	a0 e0       	ldi	r26, 0x00	; 0
    18dc:	b0 e4       	ldi	r27, 0x40	; 64
    18de:	89 8f       	std	Y+25, r24	; 0x19
    18e0:	9a 8f       	std	Y+26, r25	; 0x1a
    18e2:	ab 8f       	std	Y+27, r26	; 0x1b
    18e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e6:	69 8d       	ldd	r22, Y+25	; 0x19
    18e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	4a ef       	ldi	r20, 0xFA	; 250
    18f4:	54 e4       	ldi	r21, 0x44	; 68
    18f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	8d 8b       	std	Y+21, r24	; 0x15
    1900:	9e 8b       	std	Y+22, r25	; 0x16
    1902:	af 8b       	std	Y+23, r26	; 0x17
    1904:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1906:	6d 89       	ldd	r22, Y+21	; 0x15
    1908:	7e 89       	ldd	r23, Y+22	; 0x16
    190a:	8f 89       	ldd	r24, Y+23	; 0x17
    190c:	98 8d       	ldd	r25, Y+24	; 0x18
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	40 e8       	ldi	r20, 0x80	; 128
    1914:	5f e3       	ldi	r21, 0x3F	; 63
    1916:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    191a:	88 23       	and	r24, r24
    191c:	2c f4       	brge	.+10     	; 0x1928 <LCD_void_inti+0x53e>
		__ticks = 1;
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	9c 8b       	std	Y+20, r25	; 0x14
    1924:	8b 8b       	std	Y+19, r24	; 0x13
    1926:	3f c0       	rjmp	.+126    	; 0x19a6 <LCD_void_inti+0x5bc>
	else if (__tmp > 65535)
    1928:	6d 89       	ldd	r22, Y+21	; 0x15
    192a:	7e 89       	ldd	r23, Y+22	; 0x16
    192c:	8f 89       	ldd	r24, Y+23	; 0x17
    192e:	98 8d       	ldd	r25, Y+24	; 0x18
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	3f ef       	ldi	r19, 0xFF	; 255
    1934:	4f e7       	ldi	r20, 0x7F	; 127
    1936:	57 e4       	ldi	r21, 0x47	; 71
    1938:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    193c:	18 16       	cp	r1, r24
    193e:	4c f5       	brge	.+82     	; 0x1992 <LCD_void_inti+0x5a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1940:	69 8d       	ldd	r22, Y+25	; 0x19
    1942:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1944:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1946:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	40 e2       	ldi	r20, 0x20	; 32
    194e:	51 e4       	ldi	r21, 0x41	; 65
    1950:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	bc 01       	movw	r22, r24
    195a:	cd 01       	movw	r24, r26
    195c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	9c 8b       	std	Y+20, r25	; 0x14
    1966:	8b 8b       	std	Y+19, r24	; 0x13
    1968:	0f c0       	rjmp	.+30     	; 0x1988 <LCD_void_inti+0x59e>
    196a:	88 ec       	ldi	r24, 0xC8	; 200
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	9a 8b       	std	Y+18, r25	; 0x12
    1970:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1972:	89 89       	ldd	r24, Y+17	; 0x11
    1974:	9a 89       	ldd	r25, Y+18	; 0x12
    1976:	01 97       	sbiw	r24, 0x01	; 1
    1978:	f1 f7       	brne	.-4      	; 0x1976 <LCD_void_inti+0x58c>
    197a:	9a 8b       	std	Y+18, r25	; 0x12
    197c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    197e:	8b 89       	ldd	r24, Y+19	; 0x13
    1980:	9c 89       	ldd	r25, Y+20	; 0x14
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	9c 8b       	std	Y+20, r25	; 0x14
    1986:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1988:	8b 89       	ldd	r24, Y+19	; 0x13
    198a:	9c 89       	ldd	r25, Y+20	; 0x14
    198c:	00 97       	sbiw	r24, 0x00	; 0
    198e:	69 f7       	brne	.-38     	; 0x196a <LCD_void_inti+0x580>
    1990:	14 c0       	rjmp	.+40     	; 0x19ba <LCD_void_inti+0x5d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1992:	6d 89       	ldd	r22, Y+21	; 0x15
    1994:	7e 89       	ldd	r23, Y+22	; 0x16
    1996:	8f 89       	ldd	r24, Y+23	; 0x17
    1998:	98 8d       	ldd	r25, Y+24	; 0x18
    199a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	9c 8b       	std	Y+20, r25	; 0x14
    19a4:	8b 8b       	std	Y+19, r24	; 0x13
    19a6:	8b 89       	ldd	r24, Y+19	; 0x13
    19a8:	9c 89       	ldd	r25, Y+20	; 0x14
    19aa:	98 8b       	std	Y+16, r25	; 0x10
    19ac:	8f 87       	std	Y+15, r24	; 0x0f
    19ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    19b0:	98 89       	ldd	r25, Y+16	; 0x10
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	f1 f7       	brne	.-4      	; 0x19b2 <LCD_void_inti+0x5c8>
    19b6:	98 8b       	std	Y+16, r25	; 0x10
    19b8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_void_wirte_command(0x06);// Entry mode. (No display shift , AC increase)
    19ba:	86 e0       	ldi	r24, 0x06	; 6
    19bc:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <LCD_void_wirte_command>
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	a0 e8       	ldi	r26, 0x80	; 128
    19c6:	bf e3       	ldi	r27, 0x3F	; 63
    19c8:	8b 87       	std	Y+11, r24	; 0x0b
    19ca:	9c 87       	std	Y+12, r25	; 0x0c
    19cc:	ad 87       	std	Y+13, r26	; 0x0d
    19ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	4a ef       	ldi	r20, 0xFA	; 250
    19de:	54 e4       	ldi	r21, 0x44	; 68
    19e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	8f 83       	std	Y+7, r24	; 0x07
    19ea:	98 87       	std	Y+8, r25	; 0x08
    19ec:	a9 87       	std	Y+9, r26	; 0x09
    19ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19f0:	6f 81       	ldd	r22, Y+7	; 0x07
    19f2:	78 85       	ldd	r23, Y+8	; 0x08
    19f4:	89 85       	ldd	r24, Y+9	; 0x09
    19f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	40 e8       	ldi	r20, 0x80	; 128
    19fe:	5f e3       	ldi	r21, 0x3F	; 63
    1a00:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1a04:	88 23       	and	r24, r24
    1a06:	2c f4       	brge	.+10     	; 0x1a12 <LCD_void_inti+0x628>
		__ticks = 1;
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	9e 83       	std	Y+6, r25	; 0x06
    1a0e:	8d 83       	std	Y+5, r24	; 0x05
    1a10:	3f c0       	rjmp	.+126    	; 0x1a90 <LCD_void_inti+0x6a6>
	else if (__tmp > 65535)
    1a12:	6f 81       	ldd	r22, Y+7	; 0x07
    1a14:	78 85       	ldd	r23, Y+8	; 0x08
    1a16:	89 85       	ldd	r24, Y+9	; 0x09
    1a18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	3f ef       	ldi	r19, 0xFF	; 255
    1a1e:	4f e7       	ldi	r20, 0x7F	; 127
    1a20:	57 e4       	ldi	r21, 0x47	; 71
    1a22:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1a26:	18 16       	cp	r1, r24
    1a28:	4c f5       	brge	.+82     	; 0x1a7c <LCD_void_inti+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	40 e2       	ldi	r20, 0x20	; 32
    1a38:	51 e4       	ldi	r21, 0x41	; 65
    1a3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	bc 01       	movw	r22, r24
    1a44:	cd 01       	movw	r24, r26
    1a46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	9e 83       	std	Y+6, r25	; 0x06
    1a50:	8d 83       	std	Y+5, r24	; 0x05
    1a52:	0f c0       	rjmp	.+30     	; 0x1a72 <LCD_void_inti+0x688>
    1a54:	88 ec       	ldi	r24, 0xC8	; 200
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	9c 83       	std	Y+4, r25	; 0x04
    1a5a:	8b 83       	std	Y+3, r24	; 0x03
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	f1 f7       	brne	.-4      	; 0x1a60 <LCD_void_inti+0x676>
    1a64:	9c 83       	std	Y+4, r25	; 0x04
    1a66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a68:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	9e 83       	std	Y+6, r25	; 0x06
    1a70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a72:	8d 81       	ldd	r24, Y+5	; 0x05
    1a74:	9e 81       	ldd	r25, Y+6	; 0x06
    1a76:	00 97       	sbiw	r24, 0x00	; 0
    1a78:	69 f7       	brne	.-38     	; 0x1a54 <LCD_void_inti+0x66a>
    1a7a:	14 c0       	rjmp	.+40     	; 0x1aa4 <LCD_void_inti+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7e:	78 85       	ldd	r23, Y+8	; 0x08
    1a80:	89 85       	ldd	r24, Y+9	; 0x09
    1a82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a84:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	9e 83       	std	Y+6, r25	; 0x06
    1a8e:	8d 83       	std	Y+5, r24	; 0x05
    1a90:	8d 81       	ldd	r24, Y+5	; 0x05
    1a92:	9e 81       	ldd	r25, Y+6	; 0x06
    1a94:	9a 83       	std	Y+2, r25	; 0x02
    1a96:	89 83       	std	Y+1, r24	; 0x01
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9c:	01 97       	sbiw	r24, 0x01	; 1
    1a9e:	f1 f7       	brne	.-4      	; 0x1a9c <LCD_void_inti+0x6b2>
    1aa0:	9a 83       	std	Y+2, r25	; 0x02
    1aa2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    1aa4:	c6 5a       	subi	r28, 0xA6	; 166
    1aa6:	df 4f       	sbci	r29, 0xFF	; 255
    1aa8:	0f b6       	in	r0, 0x3f	; 63
    1aaa:	f8 94       	cli
    1aac:	de bf       	out	0x3e, r29	; 62
    1aae:	0f be       	out	0x3f, r0	; 63
    1ab0:	cd bf       	out	0x3d, r28	; 61
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	1f 91       	pop	r17
    1ab8:	0f 91       	pop	r16
    1aba:	08 95       	ret

00001abc <LCD_void_wirte_command>:
void LCD_void_wirte_command(u8 Copy_u8_cmd)
{
    1abc:	df 93       	push	r29
    1abe:	cf 93       	push	r28
    1ac0:	0f 92       	push	r0
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8Set_Pin_value(LCD_u8_ctrl_PORT,LCD_u8_RS_Pin,LCD_u8_RS_CMD);
    1ac8:	82 e0       	ldi	r24, 0x02	; 2
    1aca:	60 e0       	ldi	r22, 0x00	; 0
    1acc:	40 e0       	ldi	r20, 0x00	; 0
    1ace:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_u8Set_Pin_value>
	LCD_void_write(Copy_u8_cmd);
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <LCD_void_write>
}
    1ad8:	0f 90       	pop	r0
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	08 95       	ret

00001ae0 <LCD_void_wirte_data>:
void LCD_void_wirte_data(u8 Copy_u8_data)
{
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	0f 92       	push	r0
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8Set_Pin_value(LCD_u8_ctrl_PORT,LCD_u8_RS_Pin,LCD_u8_RS_data);
    1aec:	82 e0       	ldi	r24, 0x02	; 2
    1aee:	60 e0       	ldi	r22, 0x00	; 0
    1af0:	41 e0       	ldi	r20, 0x01	; 1
    1af2:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_u8Set_Pin_value>
	LCD_void_write(Copy_u8_data);
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <LCD_void_write>
}
    1afc:	0f 90       	pop	r0
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	08 95       	ret

00001b04 <LCD_void_write>:

void LCD_void_write(u8 Copy_u8_val)
{
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
    1b0c:	6d 97       	sbiw	r28, 0x1d	; 29
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	f8 94       	cli
    1b12:	de bf       	out	0x3e, r29	; 62
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	cd bf       	out	0x3d, r28	; 61
    1b18:	8d 8f       	std	Y+29, r24	; 0x1d

	DIO_u8Set_Pin_value(LCD_u8_ctrl_PORT,LCD_u8_RW_Pin,LCD_u8_RW_write);
    1b1a:	82 e0       	ldi	r24, 0x02	; 2
    1b1c:	61 e0       	ldi	r22, 0x01	; 1
    1b1e:	40 e0       	ldi	r20, 0x00	; 0
    1b20:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_u8Set_Pin_value>
	//DIO_u8Set_PORT_value(LCD_u8_DATA_PORT,Copy_u8_val);
	DIO_u8Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN_0,Get_bit(Copy_u8_val,0));
    1b24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b26:	98 2f       	mov	r25, r24
    1b28:	91 70       	andi	r25, 0x01	; 1
    1b2a:	83 e0       	ldi	r24, 0x03	; 3
    1b2c:	60 e0       	ldi	r22, 0x00	; 0
    1b2e:	49 2f       	mov	r20, r25
    1b30:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_u8Set_Pin_value>
	DIO_u8Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN_1,Get_bit(Copy_u8_val,1));
    1b34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b36:	86 95       	lsr	r24
    1b38:	98 2f       	mov	r25, r24
    1b3a:	91 70       	andi	r25, 0x01	; 1
    1b3c:	83 e0       	ldi	r24, 0x03	; 3
    1b3e:	61 e0       	ldi	r22, 0x01	; 1
    1b40:	49 2f       	mov	r20, r25
    1b42:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_u8Set_Pin_value>
	DIO_u8Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN_2,Get_bit(Copy_u8_val,2));
    1b46:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b48:	86 95       	lsr	r24
    1b4a:	86 95       	lsr	r24
    1b4c:	98 2f       	mov	r25, r24
    1b4e:	91 70       	andi	r25, 0x01	; 1
    1b50:	83 e0       	ldi	r24, 0x03	; 3
    1b52:	62 e0       	ldi	r22, 0x02	; 2
    1b54:	49 2f       	mov	r20, r25
    1b56:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_u8Set_Pin_value>
	DIO_u8Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN_3,Get_bit(Copy_u8_val,3));
    1b5a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b5c:	86 95       	lsr	r24
    1b5e:	86 95       	lsr	r24
    1b60:	86 95       	lsr	r24
    1b62:	98 2f       	mov	r25, r24
    1b64:	91 70       	andi	r25, 0x01	; 1
    1b66:	83 e0       	ldi	r24, 0x03	; 3
    1b68:	63 e0       	ldi	r22, 0x03	; 3
    1b6a:	49 2f       	mov	r20, r25
    1b6c:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_u8Set_Pin_value>
	DIO_u8Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN_4,Get_bit(Copy_u8_val,4));
    1b70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b72:	82 95       	swap	r24
    1b74:	8f 70       	andi	r24, 0x0F	; 15
    1b76:	98 2f       	mov	r25, r24
    1b78:	91 70       	andi	r25, 0x01	; 1
    1b7a:	83 e0       	ldi	r24, 0x03	; 3
    1b7c:	64 e0       	ldi	r22, 0x04	; 4
    1b7e:	49 2f       	mov	r20, r25
    1b80:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_u8Set_Pin_value>
	DIO_u8Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN_5,Get_bit(Copy_u8_val,5));
    1b84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b86:	82 95       	swap	r24
    1b88:	86 95       	lsr	r24
    1b8a:	87 70       	andi	r24, 0x07	; 7
    1b8c:	98 2f       	mov	r25, r24
    1b8e:	91 70       	andi	r25, 0x01	; 1
    1b90:	83 e0       	ldi	r24, 0x03	; 3
    1b92:	65 e0       	ldi	r22, 0x05	; 5
    1b94:	49 2f       	mov	r20, r25
    1b96:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_u8Set_Pin_value>
	DIO_u8Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN_6,Get_bit(Copy_u8_val,6));
    1b9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b9c:	82 95       	swap	r24
    1b9e:	86 95       	lsr	r24
    1ba0:	86 95       	lsr	r24
    1ba2:	83 70       	andi	r24, 0x03	; 3
    1ba4:	98 2f       	mov	r25, r24
    1ba6:	91 70       	andi	r25, 0x01	; 1
    1ba8:	83 e0       	ldi	r24, 0x03	; 3
    1baa:	66 e0       	ldi	r22, 0x06	; 6
    1bac:	49 2f       	mov	r20, r25
    1bae:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_u8Set_Pin_value>
	DIO_u8Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN_7,Get_bit(Copy_u8_val,7));
    1bb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bb4:	98 2f       	mov	r25, r24
    1bb6:	99 1f       	adc	r25, r25
    1bb8:	99 27       	eor	r25, r25
    1bba:	99 1f       	adc	r25, r25
    1bbc:	83 e0       	ldi	r24, 0x03	; 3
    1bbe:	67 e0       	ldi	r22, 0x07	; 7
    1bc0:	49 2f       	mov	r20, r25
    1bc2:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_u8Set_Pin_value>
	DIO_u8Set_Pin_value(LCD_u8_ctrl_PORT,LCD_u8_ENAble_Pin,LCD_u8_enable_HIGH);
    1bc6:	82 e0       	ldi	r24, 0x02	; 2
    1bc8:	62 e0       	ldi	r22, 0x02	; 2
    1bca:	41 e0       	ldi	r20, 0x01	; 1
    1bcc:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_u8Set_Pin_value>
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	a0 e0       	ldi	r26, 0x00	; 0
    1bd6:	b0 e4       	ldi	r27, 0x40	; 64
    1bd8:	89 8f       	std	Y+25, r24	; 0x19
    1bda:	9a 8f       	std	Y+26, r25	; 0x1a
    1bdc:	ab 8f       	std	Y+27, r26	; 0x1b
    1bde:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be0:	69 8d       	ldd	r22, Y+25	; 0x19
    1be2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1be4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1be6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	4a ef       	ldi	r20, 0xFA	; 250
    1bee:	54 e4       	ldi	r21, 0x44	; 68
    1bf0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	8d 8b       	std	Y+21, r24	; 0x15
    1bfa:	9e 8b       	std	Y+22, r25	; 0x16
    1bfc:	af 8b       	std	Y+23, r26	; 0x17
    1bfe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c00:	6d 89       	ldd	r22, Y+21	; 0x15
    1c02:	7e 89       	ldd	r23, Y+22	; 0x16
    1c04:	8f 89       	ldd	r24, Y+23	; 0x17
    1c06:	98 8d       	ldd	r25, Y+24	; 0x18
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	40 e8       	ldi	r20, 0x80	; 128
    1c0e:	5f e3       	ldi	r21, 0x3F	; 63
    1c10:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1c14:	88 23       	and	r24, r24
    1c16:	2c f4       	brge	.+10     	; 0x1c22 <LCD_void_write+0x11e>
		__ticks = 1;
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	9c 8b       	std	Y+20, r25	; 0x14
    1c1e:	8b 8b       	std	Y+19, r24	; 0x13
    1c20:	3f c0       	rjmp	.+126    	; 0x1ca0 <LCD_void_write+0x19c>
	else if (__tmp > 65535)
    1c22:	6d 89       	ldd	r22, Y+21	; 0x15
    1c24:	7e 89       	ldd	r23, Y+22	; 0x16
    1c26:	8f 89       	ldd	r24, Y+23	; 0x17
    1c28:	98 8d       	ldd	r25, Y+24	; 0x18
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	3f ef       	ldi	r19, 0xFF	; 255
    1c2e:	4f e7       	ldi	r20, 0x7F	; 127
    1c30:	57 e4       	ldi	r21, 0x47	; 71
    1c32:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1c36:	18 16       	cp	r1, r24
    1c38:	4c f5       	brge	.+82     	; 0x1c8c <LCD_void_write+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c3a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	40 e2       	ldi	r20, 0x20	; 32
    1c48:	51 e4       	ldi	r21, 0x41	; 65
    1c4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	bc 01       	movw	r22, r24
    1c54:	cd 01       	movw	r24, r26
    1c56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	9c 8b       	std	Y+20, r25	; 0x14
    1c60:	8b 8b       	std	Y+19, r24	; 0x13
    1c62:	0f c0       	rjmp	.+30     	; 0x1c82 <LCD_void_write+0x17e>
    1c64:	88 ec       	ldi	r24, 0xC8	; 200
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	9a 8b       	std	Y+18, r25	; 0x12
    1c6a:	89 8b       	std	Y+17, r24	; 0x11
    1c6c:	89 89       	ldd	r24, Y+17	; 0x11
    1c6e:	9a 89       	ldd	r25, Y+18	; 0x12
    1c70:	01 97       	sbiw	r24, 0x01	; 1
    1c72:	f1 f7       	brne	.-4      	; 0x1c70 <LCD_void_write+0x16c>
    1c74:	9a 8b       	std	Y+18, r25	; 0x12
    1c76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c78:	8b 89       	ldd	r24, Y+19	; 0x13
    1c7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	9c 8b       	std	Y+20, r25	; 0x14
    1c80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c82:	8b 89       	ldd	r24, Y+19	; 0x13
    1c84:	9c 89       	ldd	r25, Y+20	; 0x14
    1c86:	00 97       	sbiw	r24, 0x00	; 0
    1c88:	69 f7       	brne	.-38     	; 0x1c64 <LCD_void_write+0x160>
    1c8a:	14 c0       	rjmp	.+40     	; 0x1cb4 <LCD_void_write+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c90:	8f 89       	ldd	r24, Y+23	; 0x17
    1c92:	98 8d       	ldd	r25, Y+24	; 0x18
    1c94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	9c 8b       	std	Y+20, r25	; 0x14
    1c9e:	8b 8b       	std	Y+19, r24	; 0x13
    1ca0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ca4:	98 8b       	std	Y+16, r25	; 0x10
    1ca6:	8f 87       	std	Y+15, r24	; 0x0f
    1ca8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1caa:	98 89       	ldd	r25, Y+16	; 0x10
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	f1 f7       	brne	.-4      	; 0x1cac <LCD_void_write+0x1a8>
    1cb0:	98 8b       	std	Y+16, r25	; 0x10
    1cb2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8Set_Pin_value(LCD_u8_ctrl_PORT,LCD_u8_ENAble_Pin,LCD_u8_Enable_LOW);
    1cb4:	82 e0       	ldi	r24, 0x02	; 2
    1cb6:	62 e0       	ldi	r22, 0x02	; 2
    1cb8:	40 e0       	ldi	r20, 0x00	; 0
    1cba:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_u8Set_Pin_value>
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	a0 e0       	ldi	r26, 0x00	; 0
    1cc4:	b0 e4       	ldi	r27, 0x40	; 64
    1cc6:	8b 87       	std	Y+11, r24	; 0x0b
    1cc8:	9c 87       	std	Y+12, r25	; 0x0c
    1cca:	ad 87       	std	Y+13, r26	; 0x0d
    1ccc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cce:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	4a ef       	ldi	r20, 0xFA	; 250
    1cdc:	54 e4       	ldi	r21, 0x44	; 68
    1cde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	8f 83       	std	Y+7, r24	; 0x07
    1ce8:	98 87       	std	Y+8, r25	; 0x08
    1cea:	a9 87       	std	Y+9, r26	; 0x09
    1cec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cee:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf0:	78 85       	ldd	r23, Y+8	; 0x08
    1cf2:	89 85       	ldd	r24, Y+9	; 0x09
    1cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 e8       	ldi	r20, 0x80	; 128
    1cfc:	5f e3       	ldi	r21, 0x3F	; 63
    1cfe:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1d02:	88 23       	and	r24, r24
    1d04:	2c f4       	brge	.+10     	; 0x1d10 <LCD_void_write+0x20c>
		__ticks = 1;
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	9e 83       	std	Y+6, r25	; 0x06
    1d0c:	8d 83       	std	Y+5, r24	; 0x05
    1d0e:	3f c0       	rjmp	.+126    	; 0x1d8e <LCD_void_write+0x28a>
	else if (__tmp > 65535)
    1d10:	6f 81       	ldd	r22, Y+7	; 0x07
    1d12:	78 85       	ldd	r23, Y+8	; 0x08
    1d14:	89 85       	ldd	r24, Y+9	; 0x09
    1d16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	3f ef       	ldi	r19, 0xFF	; 255
    1d1c:	4f e7       	ldi	r20, 0x7F	; 127
    1d1e:	57 e4       	ldi	r21, 0x47	; 71
    1d20:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1d24:	18 16       	cp	r1, r24
    1d26:	4c f5       	brge	.+82     	; 0x1d7a <LCD_void_write+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	40 e2       	ldi	r20, 0x20	; 32
    1d36:	51 e4       	ldi	r21, 0x41	; 65
    1d38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	bc 01       	movw	r22, r24
    1d42:	cd 01       	movw	r24, r26
    1d44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	9e 83       	std	Y+6, r25	; 0x06
    1d4e:	8d 83       	std	Y+5, r24	; 0x05
    1d50:	0f c0       	rjmp	.+30     	; 0x1d70 <LCD_void_write+0x26c>
    1d52:	88 ec       	ldi	r24, 0xC8	; 200
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	9c 83       	std	Y+4, r25	; 0x04
    1d58:	8b 83       	std	Y+3, r24	; 0x03
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	f1 f7       	brne	.-4      	; 0x1d5e <LCD_void_write+0x25a>
    1d62:	9c 83       	std	Y+4, r25	; 0x04
    1d64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d66:	8d 81       	ldd	r24, Y+5	; 0x05
    1d68:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	9e 83       	std	Y+6, r25	; 0x06
    1d6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d70:	8d 81       	ldd	r24, Y+5	; 0x05
    1d72:	9e 81       	ldd	r25, Y+6	; 0x06
    1d74:	00 97       	sbiw	r24, 0x00	; 0
    1d76:	69 f7       	brne	.-38     	; 0x1d52 <LCD_void_write+0x24e>
    1d78:	14 c0       	rjmp	.+40     	; 0x1da2 <LCD_void_write+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d7c:	78 85       	ldd	r23, Y+8	; 0x08
    1d7e:	89 85       	ldd	r24, Y+9	; 0x09
    1d80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	9e 83       	std	Y+6, r25	; 0x06
    1d8c:	8d 83       	std	Y+5, r24	; 0x05
    1d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d90:	9e 81       	ldd	r25, Y+6	; 0x06
    1d92:	9a 83       	std	Y+2, r25	; 0x02
    1d94:	89 83       	std	Y+1, r24	; 0x01
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	f1 f7       	brne	.-4      	; 0x1d9a <LCD_void_write+0x296>
    1d9e:	9a 83       	std	Y+2, r25	; 0x02
    1da0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    1da2:	6d 96       	adiw	r28, 0x1d	; 29
    1da4:	0f b6       	in	r0, 0x3f	; 63
    1da6:	f8 94       	cli
    1da8:	de bf       	out	0x3e, r29	; 62
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	cd bf       	out	0x3d, r28	; 61
    1dae:	cf 91       	pop	r28
    1db0:	df 91       	pop	r29
    1db2:	08 95       	ret

00001db4 <LCD_void_Set_DDRam_ADD>:

void LCD_void_Set_DDRam_ADD(u8 Copy_u8DDRAM_ADD)
{
    1db4:	df 93       	push	r29
    1db6:	cf 93       	push	r28
    1db8:	0f 92       	push	r0
    1dba:	cd b7       	in	r28, 0x3d	; 61
    1dbc:	de b7       	in	r29, 0x3e	; 62
    1dbe:	89 83       	std	Y+1, r24	; 0x01
	LCD_void_wirte_command(0b10000000|Copy_u8DDRAM_ADD);
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	80 68       	ori	r24, 0x80	; 128
    1dc4:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <LCD_void_wirte_command>

}
    1dc8:	0f 90       	pop	r0
    1dca:	cf 91       	pop	r28
    1dcc:	df 91       	pop	r29
    1dce:	08 95       	ret

00001dd0 <LCD_void_Display_String>:

void LCD_void_Display_String(u8*Ptr_u8String,u8 Copy_u8X_pos,u8 Copy_u8Y_pos)
{
    1dd0:	df 93       	push	r29
    1dd2:	cf 93       	push	r28
    1dd4:	00 d0       	rcall	.+0      	; 0x1dd6 <LCD_void_Display_String+0x6>
    1dd6:	00 d0       	rcall	.+0      	; 0x1dd8 <LCD_void_Display_String+0x8>
    1dd8:	00 d0       	rcall	.+0      	; 0x1dda <LCD_void_Display_String+0xa>
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
    1dde:	9c 83       	std	Y+4, r25	; 0x04
    1de0:	8b 83       	std	Y+3, r24	; 0x03
    1de2:	6d 83       	std	Y+5, r22	; 0x05
    1de4:	4e 83       	std	Y+6, r20	; 0x06
	u32 Loc_u8_DDramAD=Copy_u8X_pos+(64*Copy_u8Y_pos);
    1de6:	8d 81       	ldd	r24, Y+5	; 0x05
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	8e 81       	ldd	r24, Y+6	; 0x06
    1dee:	88 2f       	mov	r24, r24
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	00 24       	eor	r0, r0
    1df4:	96 95       	lsr	r25
    1df6:	87 95       	ror	r24
    1df8:	07 94       	ror	r0
    1dfa:	96 95       	lsr	r25
    1dfc:	87 95       	ror	r24
    1dfe:	07 94       	ror	r0
    1e00:	98 2f       	mov	r25, r24
    1e02:	80 2d       	mov	r24, r0
    1e04:	82 0f       	add	r24, r18
    1e06:	93 1f       	adc	r25, r19
    1e08:	9a 83       	std	Y+2, r25	; 0x02
    1e0a:	89 83       	std	Y+1, r24	; 0x01
	LCD_void_Set_DDRam_ADD(Loc_u8_DDramAD);
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_void_Set_DDRam_ADD>
    1e12:	0a c0       	rjmp	.+20     	; 0x1e28 <LCD_void_Display_String+0x58>
	while(*Ptr_u8String !='\0')

	{	LCD_void_wirte_data(*Ptr_u8String);
    1e14:	eb 81       	ldd	r30, Y+3	; 0x03
    1e16:	fc 81       	ldd	r31, Y+4	; 0x04
    1e18:	80 81       	ld	r24, Z
    1e1a:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <LCD_void_wirte_data>
	Ptr_u8String++;
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	9c 81       	ldd	r25, Y+4	; 0x04
    1e22:	01 96       	adiw	r24, 0x01	; 1
    1e24:	9c 83       	std	Y+4, r25	; 0x04
    1e26:	8b 83       	std	Y+3, r24	; 0x03

void LCD_void_Display_String(u8*Ptr_u8String,u8 Copy_u8X_pos,u8 Copy_u8Y_pos)
{
	u32 Loc_u8_DDramAD=Copy_u8X_pos+(64*Copy_u8Y_pos);
	LCD_void_Set_DDRam_ADD(Loc_u8_DDramAD);
	while(*Ptr_u8String !='\0')
    1e28:	eb 81       	ldd	r30, Y+3	; 0x03
    1e2a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e2c:	80 81       	ld	r24, Z
    1e2e:	88 23       	and	r24, r24
    1e30:	89 f7       	brne	.-30     	; 0x1e14 <LCD_void_Display_String+0x44>

	{	LCD_void_wirte_data(*Ptr_u8String);
	Ptr_u8String++;

	}
}
    1e32:	26 96       	adiw	r28, 0x06	; 6
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	de bf       	out	0x3e, r29	; 62
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	cd bf       	out	0x3d, r28	; 61
    1e3e:	cf 91       	pop	r28
    1e40:	df 91       	pop	r29
    1e42:	08 95       	ret

00001e44 <LCD_Set_CG_RAM_ADD>:

void LCD_Set_CG_RAM_ADD(u8 Copy_uCGRAM_ADD){
    1e44:	df 93       	push	r29
    1e46:	cf 93       	push	r28
    1e48:	0f 92       	push	r0
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	89 83       	std	Y+1, r24	; 0x01

	LCD_void_wirte_command(0b01000000|Copy_uCGRAM_ADD);
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	80 64       	ori	r24, 0x40	; 64
    1e54:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <LCD_void_wirte_command>


}
    1e58:	0f 90       	pop	r0
    1e5a:	cf 91       	pop	r28
    1e5c:	df 91       	pop	r29
    1e5e:	08 95       	ret

00001e60 <LCD_wirte_number>:

void LCD_wirte_number(u32 Num)
{
    1e60:	df 93       	push	r29
    1e62:	cf 93       	push	r28
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
    1e68:	65 97       	sbiw	r28, 0x15	; 21
    1e6a:	0f b6       	in	r0, 0x3f	; 63
    1e6c:	f8 94       	cli
    1e6e:	de bf       	out	0x3e, r29	; 62
    1e70:	0f be       	out	0x3f, r0	; 63
    1e72:	cd bf       	out	0x3d, r28	; 61
    1e74:	9d 8b       	std	Y+21, r25	; 0x15
    1e76:	8c 8b       	std	Y+20, r24	; 0x14
	if(Num!=0)
    1e78:	8c 89       	ldd	r24, Y+20	; 0x14
    1e7a:	9d 89       	ldd	r25, Y+21	; 0x15
    1e7c:	00 97       	sbiw	r24, 0x00	; 0
    1e7e:	09 f4       	brne	.+2      	; 0x1e82 <LCD_wirte_number+0x22>
    1e80:	8d c0       	rjmp	.+282    	; 0x1f9c <LCD_wirte_number+0x13c>
	{u8 arr[11];
	u32 temp,i=0,j=0,w=0;
    1e82:	1e 82       	std	Y+6, r1	; 0x06
    1e84:	1d 82       	std	Y+5, r1	; 0x05
    1e86:	1c 82       	std	Y+4, r1	; 0x04
    1e88:	1b 82       	std	Y+3, r1	; 0x03
    1e8a:	1a 82       	std	Y+2, r1	; 0x02
    1e8c:	19 82       	std	Y+1, r1	; 0x01
    1e8e:	21 c0       	rjmp	.+66     	; 0x1ed2 <LCD_wirte_number+0x72>
	// filling array with number reversed in order
	while(Num!=0)
	{
		temp=Num%10;
    1e90:	8c 89       	ldd	r24, Y+20	; 0x14
    1e92:	9d 89       	ldd	r25, Y+21	; 0x15
    1e94:	2a e0       	ldi	r18, 0x0A	; 10
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	b9 01       	movw	r22, r18
    1e9a:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__udivmodhi4>
    1e9e:	98 87       	std	Y+8, r25	; 0x08
    1ea0:	8f 83       	std	Y+7, r24	; 0x07
		arr[i]=temp;
    1ea2:	2d 81       	ldd	r18, Y+5	; 0x05
    1ea4:	3e 81       	ldd	r19, Y+6	; 0x06
    1ea6:	4f 81       	ldd	r20, Y+7	; 0x07
    1ea8:	ce 01       	movw	r24, r28
    1eaa:	09 96       	adiw	r24, 0x09	; 9
    1eac:	fc 01       	movw	r30, r24
    1eae:	e2 0f       	add	r30, r18
    1eb0:	f3 1f       	adc	r31, r19
    1eb2:	40 83       	st	Z, r20
		i++;
    1eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb8:	01 96       	adiw	r24, 0x01	; 1
    1eba:	9e 83       	std	Y+6, r25	; 0x06
    1ebc:	8d 83       	std	Y+5, r24	; 0x05
		Num/=10;
    1ebe:	8c 89       	ldd	r24, Y+20	; 0x14
    1ec0:	9d 89       	ldd	r25, Y+21	; 0x15
    1ec2:	2a e0       	ldi	r18, 0x0A	; 10
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	b9 01       	movw	r22, r18
    1ec8:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__udivmodhi4>
    1ecc:	cb 01       	movw	r24, r22
    1ece:	9d 8b       	std	Y+21, r25	; 0x15
    1ed0:	8c 8b       	std	Y+20, r24	; 0x14
{
	if(Num!=0)
	{u8 arr[11];
	u32 temp,i=0,j=0,w=0;
	// filling array with number reversed in order
	while(Num!=0)
    1ed2:	8c 89       	ldd	r24, Y+20	; 0x14
    1ed4:	9d 89       	ldd	r25, Y+21	; 0x15
    1ed6:	00 97       	sbiw	r24, 0x00	; 0
    1ed8:	d9 f6       	brne	.-74     	; 0x1e90 <LCD_wirte_number+0x30>
		temp=Num%10;
		arr[i]=temp;
		i++;
		Num/=10;
	}
	arr[i]='x';
    1eda:	2d 81       	ldd	r18, Y+5	; 0x05
    1edc:	3e 81       	ldd	r19, Y+6	; 0x06
    1ede:	ce 01       	movw	r24, r28
    1ee0:	09 96       	adiw	r24, 0x09	; 9
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	e2 0f       	add	r30, r18
    1ee6:	f3 1f       	adc	r31, r19
    1ee8:	88 e7       	ldi	r24, 0x78	; 120
    1eea:	80 83       	st	Z, r24
	i--;
    1eec:	8d 81       	ldd	r24, Y+5	; 0x05
    1eee:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	9e 83       	std	Y+6, r25	; 0x06
    1ef4:	8d 83       	std	Y+5, r24	; 0x05
    1ef6:	2f c0       	rjmp	.+94     	; 0x1f56 <LCD_wirte_number+0xf6>
	// re arrange the array
	while(j<i)
	{
		// swap
		temp=arr[j];
    1ef8:	2b 81       	ldd	r18, Y+3	; 0x03
    1efa:	3c 81       	ldd	r19, Y+4	; 0x04
    1efc:	ce 01       	movw	r24, r28
    1efe:	09 96       	adiw	r24, 0x09	; 9
    1f00:	fc 01       	movw	r30, r24
    1f02:	e2 0f       	add	r30, r18
    1f04:	f3 1f       	adc	r31, r19
    1f06:	80 81       	ld	r24, Z
    1f08:	88 2f       	mov	r24, r24
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	98 87       	std	Y+8, r25	; 0x08
    1f0e:	8f 83       	std	Y+7, r24	; 0x07
		arr[j]=arr[i];
    1f10:	4b 81       	ldd	r20, Y+3	; 0x03
    1f12:	5c 81       	ldd	r21, Y+4	; 0x04
    1f14:	2d 81       	ldd	r18, Y+5	; 0x05
    1f16:	3e 81       	ldd	r19, Y+6	; 0x06
    1f18:	ce 01       	movw	r24, r28
    1f1a:	09 96       	adiw	r24, 0x09	; 9
    1f1c:	fc 01       	movw	r30, r24
    1f1e:	e2 0f       	add	r30, r18
    1f20:	f3 1f       	adc	r31, r19
    1f22:	20 81       	ld	r18, Z
    1f24:	ce 01       	movw	r24, r28
    1f26:	09 96       	adiw	r24, 0x09	; 9
    1f28:	fc 01       	movw	r30, r24
    1f2a:	e4 0f       	add	r30, r20
    1f2c:	f5 1f       	adc	r31, r21
    1f2e:	20 83       	st	Z, r18
		arr[i]=temp;
    1f30:	2d 81       	ldd	r18, Y+5	; 0x05
    1f32:	3e 81       	ldd	r19, Y+6	; 0x06
    1f34:	4f 81       	ldd	r20, Y+7	; 0x07
    1f36:	ce 01       	movw	r24, r28
    1f38:	09 96       	adiw	r24, 0x09	; 9
    1f3a:	fc 01       	movw	r30, r24
    1f3c:	e2 0f       	add	r30, r18
    1f3e:	f3 1f       	adc	r31, r19
    1f40:	40 83       	st	Z, r20
		j++;
    1f42:	8b 81       	ldd	r24, Y+3	; 0x03
    1f44:	9c 81       	ldd	r25, Y+4	; 0x04
    1f46:	01 96       	adiw	r24, 0x01	; 1
    1f48:	9c 83       	std	Y+4, r25	; 0x04
    1f4a:	8b 83       	std	Y+3, r24	; 0x03
		i--;
    1f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	9e 83       	std	Y+6, r25	; 0x06
    1f54:	8d 83       	std	Y+5, r24	; 0x05
		Num/=10;
	}
	arr[i]='x';
	i--;
	// re arrange the array
	while(j<i)
    1f56:	2b 81       	ldd	r18, Y+3	; 0x03
    1f58:	3c 81       	ldd	r19, Y+4	; 0x04
    1f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5e:	28 17       	cp	r18, r24
    1f60:	39 07       	cpc	r19, r25
    1f62:	50 f2       	brcs	.-108    	; 0x1ef8 <LCD_wirte_number+0x98>
    1f64:	10 c0       	rjmp	.+32     	; 0x1f86 <LCD_wirte_number+0x126>
		j++;
		i--;
	}
	while(arr[w]!='x')
	{
		LCD_void_wirte_data(arr[w]+'0');
    1f66:	29 81       	ldd	r18, Y+1	; 0x01
    1f68:	3a 81       	ldd	r19, Y+2	; 0x02
    1f6a:	ce 01       	movw	r24, r28
    1f6c:	09 96       	adiw	r24, 0x09	; 9
    1f6e:	fc 01       	movw	r30, r24
    1f70:	e2 0f       	add	r30, r18
    1f72:	f3 1f       	adc	r31, r19
    1f74:	80 81       	ld	r24, Z
    1f76:	80 5d       	subi	r24, 0xD0	; 208
    1f78:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <LCD_void_wirte_data>
		w++;
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f80:	01 96       	adiw	r24, 0x01	; 1
    1f82:	9a 83       	std	Y+2, r25	; 0x02
    1f84:	89 83       	std	Y+1, r24	; 0x01
		arr[j]=arr[i];
		arr[i]=temp;
		j++;
		i--;
	}
	while(arr[w]!='x')
    1f86:	29 81       	ldd	r18, Y+1	; 0x01
    1f88:	3a 81       	ldd	r19, Y+2	; 0x02
    1f8a:	ce 01       	movw	r24, r28
    1f8c:	09 96       	adiw	r24, 0x09	; 9
    1f8e:	fc 01       	movw	r30, r24
    1f90:	e2 0f       	add	r30, r18
    1f92:	f3 1f       	adc	r31, r19
    1f94:	80 81       	ld	r24, Z
    1f96:	88 37       	cpi	r24, 0x78	; 120
    1f98:	31 f7       	brne	.-52     	; 0x1f66 <LCD_wirte_number+0x106>
    1f9a:	03 c0       	rjmp	.+6      	; 0x1fa2 <LCD_wirte_number+0x142>
		LCD_void_wirte_data(arr[w]+'0');
		w++;
	}

	}else{
		LCD_void_wirte_data('0');
    1f9c:	80 e3       	ldi	r24, 0x30	; 48
    1f9e:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <LCD_void_wirte_data>
	}
}
    1fa2:	65 96       	adiw	r28, 0x15	; 21
    1fa4:	0f b6       	in	r0, 0x3f	; 63
    1fa6:	f8 94       	cli
    1fa8:	de bf       	out	0x3e, r29	; 62
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	cd bf       	out	0x3d, r28	; 61
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	08 95       	ret

00001fb4 <LCD_wirte_number_float>:

void LCD_wirte_number_float(f32 Num)
{
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
    1fbc:	6c 97       	sbiw	r28, 0x1c	; 28
    1fbe:	0f b6       	in	r0, 0x3f	; 63
    1fc0:	f8 94       	cli
    1fc2:	de bf       	out	0x3e, r29	; 62
    1fc4:	0f be       	out	0x3f, r0	; 63
    1fc6:	cd bf       	out	0x3d, r28	; 61
    1fc8:	69 8f       	std	Y+25, r22	; 0x19
    1fca:	7a 8f       	std	Y+26, r23	; 0x1a
    1fcc:	8b 8f       	std	Y+27, r24	; 0x1b
    1fce:	9c 8f       	std	Y+28, r25	; 0x1c
	if(Num!=0)
    1fd0:	69 8d       	ldd	r22, Y+25	; 0x19
    1fd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e0       	ldi	r20, 0x00	; 0
    1fde:	50 e0       	ldi	r21, 0x00	; 0
    1fe0:	0e 94 bd 03 	call	0x77a	; 0x77a <__nesf2>
    1fe4:	88 23       	and	r24, r24
    1fe6:	09 f4       	brne	.+2      	; 0x1fea <LCD_wirte_number_float+0x36>
    1fe8:	e7 c0       	rjmp	.+462    	; 0x21b8 <LCD_wirte_number_float+0x204>
	{
		u8 arr_Dec[3];
		u8 arr_int[11];
		u32 temp,temp2,i=0,j=0,w=0;
    1fea:	1e 82       	std	Y+6, r1	; 0x06
    1fec:	1d 82       	std	Y+5, r1	; 0x05
    1fee:	1c 82       	std	Y+4, r1	; 0x04
    1ff0:	1b 82       	std	Y+3, r1	; 0x03
    1ff2:	1a 82       	std	Y+2, r1	; 0x02
    1ff4:	19 82       	std	Y+1, r1	; 0x01
		// storing floating numbs in arr_Dec
		temp=Num*100;
    1ff6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ff8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ffa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ffc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	48 ec       	ldi	r20, 0xC8	; 200
    2004:	52 e4       	ldi	r21, 0x42	; 66
    2006:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	bc 01       	movw	r22, r24
    2010:	cd 01       	movw	r24, r26
    2012:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	9a 87       	std	Y+10, r25	; 0x0a
    201c:	89 87       	std	Y+9, r24	; 0x09
		arr_Dec[1]=temp%10;
    201e:	89 85       	ldd	r24, Y+9	; 0x09
    2020:	9a 85       	ldd	r25, Y+10	; 0x0a
    2022:	2a e0       	ldi	r18, 0x0A	; 10
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	b9 01       	movw	r22, r18
    2028:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__udivmodhi4>
    202c:	8c 87       	std	Y+12, r24	; 0x0c
		temp/=10;
    202e:	89 85       	ldd	r24, Y+9	; 0x09
    2030:	9a 85       	ldd	r25, Y+10	; 0x0a
    2032:	2a e0       	ldi	r18, 0x0A	; 10
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	b9 01       	movw	r22, r18
    2038:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__udivmodhi4>
    203c:	cb 01       	movw	r24, r22
    203e:	9a 87       	std	Y+10, r25	; 0x0a
    2040:	89 87       	std	Y+9, r24	; 0x09
		arr_Dec[0]=temp%10;
    2042:	89 85       	ldd	r24, Y+9	; 0x09
    2044:	9a 85       	ldd	r25, Y+10	; 0x0a
    2046:	2a e0       	ldi	r18, 0x0A	; 10
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	b9 01       	movw	r22, r18
    204c:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__udivmodhi4>
    2050:	8b 87       	std	Y+11, r24	; 0x0b
		temp/=10;
    2052:	89 85       	ldd	r24, Y+9	; 0x09
    2054:	9a 85       	ldd	r25, Y+10	; 0x0a
    2056:	2a e0       	ldi	r18, 0x0A	; 10
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	b9 01       	movw	r22, r18
    205c:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__udivmodhi4>
    2060:	cb 01       	movw	r24, r22
    2062:	9a 87       	std	Y+10, r25	; 0x0a
    2064:	89 87       	std	Y+9, r24	; 0x09
		arr_Dec[2]='x';
    2066:	88 e7       	ldi	r24, 0x78	; 120
    2068:	8d 87       	std	Y+13, r24	; 0x0d
    206a:	21 c0       	rjmp	.+66     	; 0x20ae <LCD_wirte_number_float+0xfa>
		while(temp!=0)
		{
			temp2=temp%10;
    206c:	89 85       	ldd	r24, Y+9	; 0x09
    206e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2070:	2a e0       	ldi	r18, 0x0A	; 10
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	b9 01       	movw	r22, r18
    2076:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__udivmodhi4>
    207a:	98 87       	std	Y+8, r25	; 0x08
    207c:	8f 83       	std	Y+7, r24	; 0x07
			arr_int[i]=temp2;
    207e:	2d 81       	ldd	r18, Y+5	; 0x05
    2080:	3e 81       	ldd	r19, Y+6	; 0x06
    2082:	4f 81       	ldd	r20, Y+7	; 0x07
    2084:	ce 01       	movw	r24, r28
    2086:	0e 96       	adiw	r24, 0x0e	; 14
    2088:	fc 01       	movw	r30, r24
    208a:	e2 0f       	add	r30, r18
    208c:	f3 1f       	adc	r31, r19
    208e:	40 83       	st	Z, r20
			i++;
    2090:	8d 81       	ldd	r24, Y+5	; 0x05
    2092:	9e 81       	ldd	r25, Y+6	; 0x06
    2094:	01 96       	adiw	r24, 0x01	; 1
    2096:	9e 83       	std	Y+6, r25	; 0x06
    2098:	8d 83       	std	Y+5, r24	; 0x05
			temp/=10;
    209a:	89 85       	ldd	r24, Y+9	; 0x09
    209c:	9a 85       	ldd	r25, Y+10	; 0x0a
    209e:	2a e0       	ldi	r18, 0x0A	; 10
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	b9 01       	movw	r22, r18
    20a4:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__udivmodhi4>
    20a8:	cb 01       	movw	r24, r22
    20aa:	9a 87       	std	Y+10, r25	; 0x0a
    20ac:	89 87       	std	Y+9, r24	; 0x09
		arr_Dec[1]=temp%10;
		temp/=10;
		arr_Dec[0]=temp%10;
		temp/=10;
		arr_Dec[2]='x';
		while(temp!=0)
    20ae:	89 85       	ldd	r24, Y+9	; 0x09
    20b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b2:	00 97       	sbiw	r24, 0x00	; 0
    20b4:	d9 f6       	brne	.-74     	; 0x206c <LCD_wirte_number_float+0xb8>
			temp2=temp%10;
			arr_int[i]=temp2;
			i++;
			temp/=10;
		}
		arr_int[i]='x';
    20b6:	2d 81       	ldd	r18, Y+5	; 0x05
    20b8:	3e 81       	ldd	r19, Y+6	; 0x06
    20ba:	ce 01       	movw	r24, r28
    20bc:	0e 96       	adiw	r24, 0x0e	; 14
    20be:	fc 01       	movw	r30, r24
    20c0:	e2 0f       	add	r30, r18
    20c2:	f3 1f       	adc	r31, r19
    20c4:	88 e7       	ldi	r24, 0x78	; 120
    20c6:	80 83       	st	Z, r24
		i--;
    20c8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ca:	9e 81       	ldd	r25, Y+6	; 0x06
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	9e 83       	std	Y+6, r25	; 0x06
    20d0:	8d 83       	std	Y+5, r24	; 0x05
    20d2:	2f c0       	rjmp	.+94     	; 0x2132 <LCD_wirte_number_float+0x17e>
		// re arrange the array
		while(j<i)
		{
			// swap
			temp2=arr_int[j];
    20d4:	2b 81       	ldd	r18, Y+3	; 0x03
    20d6:	3c 81       	ldd	r19, Y+4	; 0x04
    20d8:	ce 01       	movw	r24, r28
    20da:	0e 96       	adiw	r24, 0x0e	; 14
    20dc:	fc 01       	movw	r30, r24
    20de:	e2 0f       	add	r30, r18
    20e0:	f3 1f       	adc	r31, r19
    20e2:	80 81       	ld	r24, Z
    20e4:	88 2f       	mov	r24, r24
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	98 87       	std	Y+8, r25	; 0x08
    20ea:	8f 83       	std	Y+7, r24	; 0x07
			arr_int[j]=arr_int[i];
    20ec:	4b 81       	ldd	r20, Y+3	; 0x03
    20ee:	5c 81       	ldd	r21, Y+4	; 0x04
    20f0:	2d 81       	ldd	r18, Y+5	; 0x05
    20f2:	3e 81       	ldd	r19, Y+6	; 0x06
    20f4:	ce 01       	movw	r24, r28
    20f6:	0e 96       	adiw	r24, 0x0e	; 14
    20f8:	fc 01       	movw	r30, r24
    20fa:	e2 0f       	add	r30, r18
    20fc:	f3 1f       	adc	r31, r19
    20fe:	20 81       	ld	r18, Z
    2100:	ce 01       	movw	r24, r28
    2102:	0e 96       	adiw	r24, 0x0e	; 14
    2104:	fc 01       	movw	r30, r24
    2106:	e4 0f       	add	r30, r20
    2108:	f5 1f       	adc	r31, r21
    210a:	20 83       	st	Z, r18
			arr_int[i]=temp2;
    210c:	2d 81       	ldd	r18, Y+5	; 0x05
    210e:	3e 81       	ldd	r19, Y+6	; 0x06
    2110:	4f 81       	ldd	r20, Y+7	; 0x07
    2112:	ce 01       	movw	r24, r28
    2114:	0e 96       	adiw	r24, 0x0e	; 14
    2116:	fc 01       	movw	r30, r24
    2118:	e2 0f       	add	r30, r18
    211a:	f3 1f       	adc	r31, r19
    211c:	40 83       	st	Z, r20
			j++;
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	9c 81       	ldd	r25, Y+4	; 0x04
    2122:	01 96       	adiw	r24, 0x01	; 1
    2124:	9c 83       	std	Y+4, r25	; 0x04
    2126:	8b 83       	std	Y+3, r24	; 0x03
			i--;
    2128:	8d 81       	ldd	r24, Y+5	; 0x05
    212a:	9e 81       	ldd	r25, Y+6	; 0x06
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	9e 83       	std	Y+6, r25	; 0x06
    2130:	8d 83       	std	Y+5, r24	; 0x05
			temp/=10;
		}
		arr_int[i]='x';
		i--;
		// re arrange the array
		while(j<i)
    2132:	2b 81       	ldd	r18, Y+3	; 0x03
    2134:	3c 81       	ldd	r19, Y+4	; 0x04
    2136:	8d 81       	ldd	r24, Y+5	; 0x05
    2138:	9e 81       	ldd	r25, Y+6	; 0x06
    213a:	28 17       	cp	r18, r24
    213c:	39 07       	cpc	r19, r25
    213e:	50 f2       	brcs	.-108    	; 0x20d4 <LCD_wirte_number_float+0x120>
    2140:	10 c0       	rjmp	.+32     	; 0x2162 <LCD_wirte_number_float+0x1ae>
			j++;
			i--;
		}
		while(arr_int[w]!='x')
		{
			LCD_void_wirte_data(arr_int[w]+'0');
    2142:	29 81       	ldd	r18, Y+1	; 0x01
    2144:	3a 81       	ldd	r19, Y+2	; 0x02
    2146:	ce 01       	movw	r24, r28
    2148:	0e 96       	adiw	r24, 0x0e	; 14
    214a:	fc 01       	movw	r30, r24
    214c:	e2 0f       	add	r30, r18
    214e:	f3 1f       	adc	r31, r19
    2150:	80 81       	ld	r24, Z
    2152:	80 5d       	subi	r24, 0xD0	; 208
    2154:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <LCD_void_wirte_data>

			w++;
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	9a 81       	ldd	r25, Y+2	; 0x02
    215c:	01 96       	adiw	r24, 0x01	; 1
    215e:	9a 83       	std	Y+2, r25	; 0x02
    2160:	89 83       	std	Y+1, r24	; 0x01
			arr_int[j]=arr_int[i];
			arr_int[i]=temp2;
			j++;
			i--;
		}
		while(arr_int[w]!='x')
    2162:	29 81       	ldd	r18, Y+1	; 0x01
    2164:	3a 81       	ldd	r19, Y+2	; 0x02
    2166:	ce 01       	movw	r24, r28
    2168:	0e 96       	adiw	r24, 0x0e	; 14
    216a:	fc 01       	movw	r30, r24
    216c:	e2 0f       	add	r30, r18
    216e:	f3 1f       	adc	r31, r19
    2170:	80 81       	ld	r24, Z
    2172:	88 37       	cpi	r24, 0x78	; 120
    2174:	31 f7       	brne	.-52     	; 0x2142 <LCD_wirte_number_float+0x18e>
		{
			LCD_void_wirte_data(arr_int[w]+'0');

			w++;
		}
		LCD_void_wirte_data('.');
    2176:	8e e2       	ldi	r24, 0x2E	; 46
    2178:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <LCD_void_wirte_data>

		w=0;
    217c:	1a 82       	std	Y+2, r1	; 0x02
    217e:	19 82       	std	Y+1, r1	; 0x01
    2180:	10 c0       	rjmp	.+32     	; 0x21a2 <LCD_wirte_number_float+0x1ee>
		while(arr_Dec[w]!='x')
		{
			LCD_void_wirte_data(arr_Dec[w]+'0');
    2182:	29 81       	ldd	r18, Y+1	; 0x01
    2184:	3a 81       	ldd	r19, Y+2	; 0x02
    2186:	ce 01       	movw	r24, r28
    2188:	0b 96       	adiw	r24, 0x0b	; 11
    218a:	fc 01       	movw	r30, r24
    218c:	e2 0f       	add	r30, r18
    218e:	f3 1f       	adc	r31, r19
    2190:	80 81       	ld	r24, Z
    2192:	80 5d       	subi	r24, 0xD0	; 208
    2194:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <LCD_void_wirte_data>
			w++;
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	9a 81       	ldd	r25, Y+2	; 0x02
    219c:	01 96       	adiw	r24, 0x01	; 1
    219e:	9a 83       	std	Y+2, r25	; 0x02
    21a0:	89 83       	std	Y+1, r24	; 0x01
			w++;
		}
		LCD_void_wirte_data('.');

		w=0;
		while(arr_Dec[w]!='x')
    21a2:	29 81       	ldd	r18, Y+1	; 0x01
    21a4:	3a 81       	ldd	r19, Y+2	; 0x02
    21a6:	ce 01       	movw	r24, r28
    21a8:	0b 96       	adiw	r24, 0x0b	; 11
    21aa:	fc 01       	movw	r30, r24
    21ac:	e2 0f       	add	r30, r18
    21ae:	f3 1f       	adc	r31, r19
    21b0:	80 81       	ld	r24, Z
    21b2:	88 37       	cpi	r24, 0x78	; 120
    21b4:	31 f7       	brne	.-52     	; 0x2182 <LCD_wirte_number_float+0x1ce>
    21b6:	03 c0       	rjmp	.+6      	; 0x21be <LCD_wirte_number_float+0x20a>
		{
			LCD_void_wirte_data(arr_Dec[w]+'0');
			w++;
		}
	}else{
		LCD_void_wirte_data('0');
    21b8:	80 e3       	ldi	r24, 0x30	; 48
    21ba:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <LCD_void_wirte_data>
	}



}
    21be:	6c 96       	adiw	r28, 0x1c	; 28
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	f8 94       	cli
    21c4:	de bf       	out	0x3e, r29	; 62
    21c6:	0f be       	out	0x3f, r0	; 63
    21c8:	cd bf       	out	0x3d, r28	; 61
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <main>:
#include"LCD_private.h"
#include "LCD_config.h"
#include "LCD_interface.h"
#include <avr/delay.h>
void main()
{
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62

	LCD_void_inti();
    21d8:	0e 94 f5 09 	call	0x13ea	; 0x13ea <LCD_void_inti>
	LCD_void_Set_DDRam_ADD(0);
	LCD_void_wirte_data(0);

	 */

	LCD_wirte_number_float(60.123);
    21dc:	64 ef       	ldi	r22, 0xF4	; 244
    21de:	7d e7       	ldi	r23, 0x7D	; 125
    21e0:	80 e7       	ldi	r24, 0x70	; 112
    21e2:	92 e4       	ldi	r25, 0x42	; 66
    21e4:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <LCD_wirte_number_float>
    21e8:	ff cf       	rjmp	.-2      	; 0x21e8 <main+0x18>

000021ea <__udivmodhi4>:
    21ea:	aa 1b       	sub	r26, r26
    21ec:	bb 1b       	sub	r27, r27
    21ee:	51 e1       	ldi	r21, 0x11	; 17
    21f0:	07 c0       	rjmp	.+14     	; 0x2200 <__udivmodhi4_ep>

000021f2 <__udivmodhi4_loop>:
    21f2:	aa 1f       	adc	r26, r26
    21f4:	bb 1f       	adc	r27, r27
    21f6:	a6 17       	cp	r26, r22
    21f8:	b7 07       	cpc	r27, r23
    21fa:	10 f0       	brcs	.+4      	; 0x2200 <__udivmodhi4_ep>
    21fc:	a6 1b       	sub	r26, r22
    21fe:	b7 0b       	sbc	r27, r23

00002200 <__udivmodhi4_ep>:
    2200:	88 1f       	adc	r24, r24
    2202:	99 1f       	adc	r25, r25
    2204:	5a 95       	dec	r21
    2206:	a9 f7       	brne	.-22     	; 0x21f2 <__udivmodhi4_loop>
    2208:	80 95       	com	r24
    220a:	90 95       	com	r25
    220c:	bc 01       	movw	r22, r24
    220e:	cd 01       	movw	r24, r26
    2210:	08 95       	ret

00002212 <__prologue_saves__>:
    2212:	2f 92       	push	r2
    2214:	3f 92       	push	r3
    2216:	4f 92       	push	r4
    2218:	5f 92       	push	r5
    221a:	6f 92       	push	r6
    221c:	7f 92       	push	r7
    221e:	8f 92       	push	r8
    2220:	9f 92       	push	r9
    2222:	af 92       	push	r10
    2224:	bf 92       	push	r11
    2226:	cf 92       	push	r12
    2228:	df 92       	push	r13
    222a:	ef 92       	push	r14
    222c:	ff 92       	push	r15
    222e:	0f 93       	push	r16
    2230:	1f 93       	push	r17
    2232:	cf 93       	push	r28
    2234:	df 93       	push	r29
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
    223a:	ca 1b       	sub	r28, r26
    223c:	db 0b       	sbc	r29, r27
    223e:	0f b6       	in	r0, 0x3f	; 63
    2240:	f8 94       	cli
    2242:	de bf       	out	0x3e, r29	; 62
    2244:	0f be       	out	0x3f, r0	; 63
    2246:	cd bf       	out	0x3d, r28	; 61
    2248:	09 94       	ijmp

0000224a <__epilogue_restores__>:
    224a:	2a 88       	ldd	r2, Y+18	; 0x12
    224c:	39 88       	ldd	r3, Y+17	; 0x11
    224e:	48 88       	ldd	r4, Y+16	; 0x10
    2250:	5f 84       	ldd	r5, Y+15	; 0x0f
    2252:	6e 84       	ldd	r6, Y+14	; 0x0e
    2254:	7d 84       	ldd	r7, Y+13	; 0x0d
    2256:	8c 84       	ldd	r8, Y+12	; 0x0c
    2258:	9b 84       	ldd	r9, Y+11	; 0x0b
    225a:	aa 84       	ldd	r10, Y+10	; 0x0a
    225c:	b9 84       	ldd	r11, Y+9	; 0x09
    225e:	c8 84       	ldd	r12, Y+8	; 0x08
    2260:	df 80       	ldd	r13, Y+7	; 0x07
    2262:	ee 80       	ldd	r14, Y+6	; 0x06
    2264:	fd 80       	ldd	r15, Y+5	; 0x05
    2266:	0c 81       	ldd	r16, Y+4	; 0x04
    2268:	1b 81       	ldd	r17, Y+3	; 0x03
    226a:	aa 81       	ldd	r26, Y+2	; 0x02
    226c:	b9 81       	ldd	r27, Y+1	; 0x01
    226e:	ce 0f       	add	r28, r30
    2270:	d1 1d       	adc	r29, r1
    2272:	0f b6       	in	r0, 0x3f	; 63
    2274:	f8 94       	cli
    2276:	de bf       	out	0x3e, r29	; 62
    2278:	0f be       	out	0x3f, r0	; 63
    227a:	cd bf       	out	0x3d, r28	; 61
    227c:	ed 01       	movw	r28, r26
    227e:	08 95       	ret

00002280 <_exit>:
    2280:	f8 94       	cli

00002282 <__stop_program>:
    2282:	ff cf       	rjmp	.-2      	; 0x2282 <__stop_program>
